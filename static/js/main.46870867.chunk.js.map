{"version":3,"sources":["utils/index.ts","lists/types.ts","app/localization/data/index.ts","app/Header/Header.tsx","shared/Button/index.tsx","shared/TextArea/index.tsx","shared/FieldEditor/index.tsx","app/HomePage/HomePage.tsx","boards/types.ts","lists/actions.ts","cards/types.ts","boards/actions.ts","app/localization/types.ts","cards/actions.ts","cards/components/Card.tsx","cards/components/NewCard.tsx","cards/components/ListOfCards.tsx","lists/components/List.tsx","lists/components/NewList.tsx","lists/components/ListOfLists.tsx","app/NotFoundPage/NotFoundPage.tsx","app/BoardPage/BoardPage.tsx","boards/components/BoardLink.tsx","boards/components/NewBoard.tsx","boards/components/BoardsNavigation.tsx","app/App.tsx","app/localStorage.ts","app/localization/reducer.ts","boards/reducer.ts","lists/reducer.ts","cards/reducer.ts","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["preventClickDefault","e","preventDefault","HORIZONTAL_SCROLLING_SPEED_FACTOR","ListActionTypes","translations","en","name","data","ru","Header","intl","useIntl","className","to","exact","formatMessage","id","defaultMessage","Button","forwardRef","ref","derivedClassName","attributes","TextArea","labelValue","isInvalid","value","useState","hideLabel","setHideLabel","useEffect","textAreaClassName","textAreaProps","spellCheck","TextareaAutosize","FieldEditor","fieldName","displayOnViewMode","initialEditMode","derivedEditMode","editMode","useIconToggler","onSubmit","onDelete","onEditToggle","titles","setEditMode","currentValue","setCurrentValue","textAreaRef","useRef","trim","toggleEdit","handleSubmit","trimmedCurrentValue","current","focus","editTitle","edit","submitTitle","submit","cancelTitle","cancel","deleteTitle","delete","onClick","title","undefined","rowsMax","disabled","required","onChange","target","replace","onKeyDown","key","fontSize","HomePage","CREATE_LIST","DELETE_LIST","CHANGE_LIST","MOVE_CARD","BoardActionTypes","CREATE_BOARD","CHANGE_BOARD","DELETE_BOARD","MOVE_LIST","CardActionTypes","CREATE_CARD","DELETE_CARD","CHANGE_CARD","LocaleActionTypes","memo","index","onEdit","content","useSelector","cards","handleDelete","newContent","shouldDrag","setShouldDrag","toggleShouldDrag","draggableId","disableInteractiveElementBlocking","provided","style","draggableProps","element","dragHandleProps","innerRef","position","createPortal","document","getElementById","onCreate","listId","dispatch","useDispatch","cardsIds","lists","useCallback","type","payload","cardId","v4","createCard","deleteCard","changeCard","droppableId","droppableProps","map","placeholder","newTitle","NewList","boardId","boards","byId","createList","getState","deleteList","changeList","onListMove","fromIndex","toIndex","moveList","onCardMove","fromListId","toListId","moveCard","onDragEnd","result","destination","source","direction","NotFoundPage","message","history","useHistory","goBack","BoardPage","match","params","state","onWheel","currentTarget","deltaY","closest","scrollTo","left","scrollLeft","behavior","FieldEditProps","BoardsNavigation","boardsIds","allIds","createBoard","location","pathname","includes","push","listsIds","flat","deleteBoard","changeBoard","PageNotFound","App","locale","languageCode","messages","path","component","render","saveState","serializedState","JSON","stringify","store","localStorage","setItem","err","watchState","throttle","subscribe","SET_LANGUAGE","preferredLanguage","navigator","language","slice","initialState","languageName","localeReducer","boardReducer","filter","board","list","splice","targetListId","listReducer","rest","newState","fromList","card","toList","prop","hasOwnProperty","combineReducers","cardReducer","middleware","ReduxThunk","createStore","rootReducer","getItem","parse","loadState","composeWithDevTools","applyMiddleware","ReactDOM","basename","process"],"mappings":"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","file":"static/js/main.46870867.chunk.js","sourcesContent":["import { MouseEvent } from 'react';\r\n\r\nexport * from './types';\r\n\r\nexport const cloneDeep = <T extends {} | []>(structure: T): T =>\r\n  JSON.parse(JSON.stringify(structure));\r\n\r\nexport const preventClickDefault = (e: MouseEvent) => e.preventDefault();\r\n\r\nexport const HORIZONTAL_SCROLLING_SPEED_FACTOR = 0.75;\r\n","import { ActionCreator } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'utils';\r\n\r\nexport enum ListActionTypes {\r\n  CREATE_LIST = 'CREATE_LIST',\r\n  DELETE_LIST = 'DELETE_LIST',\r\n  CHANGE_LIST = 'CHANGE_LIST',\r\n  MOVE_CARD = 'MOVE_CARD',\r\n}\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport interface CreateListAction {\r\n  type: typeof CREATE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteListAction {\r\n  type: typeof DELETE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteListThunk = ActionCreator<\r\n  ThunkAction<DeleteListAction, AppState, void, DeleteListAction>\r\n>;\r\n\r\nexport interface ChangeListAction {\r\n  type: typeof CHANGE_LIST;\r\n  payload: {\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveCardAction {\r\n  type: typeof MOVE_CARD;\r\n  payload: {\r\n    fromListId: string;\r\n    toListId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type ListActions =\r\n  | CreateListAction\r\n  | DeleteListAction\r\n  | ChangeListAction\r\n  | MoveCardAction;\r\n\r\nexport interface ListData {\r\n  id: string;\r\n  title: string;\r\n  cards: string[];\r\n}\r\n\r\nexport interface ListsState {\r\n  [prop: string]: ListData;\r\n}\r\n","import englishTranslation from './en.json';\r\nimport russianTranslation from './ru.json';\r\n\r\nconst translations = {\r\n  en: {\r\n    name: 'english',\r\n    data: englishTranslation,\r\n  },\r\n  ru: {\r\n    name: 'russian',\r\n    data: russianTranslation,\r\n  },\r\n};\r\n\r\nexport default translations;\r\n","import React, { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport './styles.scss';\r\n\r\nconst Header: FC = () => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <header className=\"site-header\">\r\n      <nav className=\"site-navigation\">\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\" exact={true}>\r\n              {intl.formatMessage({ id: 'app/home', defaultMessage: 'Home' })}\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/boards\">\r\n              {intl.formatMessage({\r\n                id: 'app/boards',\r\n                defaultMessage: 'Boards',\r\n              })}\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { forwardRef, ComponentProps } from 'react';\r\nimport './styles.scss';\r\n\r\nexport const Button = forwardRef<HTMLButtonElement, ComponentProps<'button'>>(\r\n  ({ className: derivedClassName = '', ...attributes }, ref) => {\r\n    let className = 'button';\r\n    if (derivedClassName) className += ' ' + derivedClassName;\r\n    return <button className={className} {...attributes} ref={ref} />;\r\n  }\r\n);\r\n","import React, { useState, forwardRef, useEffect } from 'react';\r\nimport { TextareaAutosize, TextareaAutosizeProps } from '@material-ui/core';\r\nimport './styles.scss';\r\n\r\nexport interface TextAreaProps extends TextareaAutosizeProps {\r\n  labelValue?: string;\r\n  isInvalid?: boolean;\r\n}\r\n\r\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\r\n  (\r\n    {\r\n      labelValue = false,\r\n      isInvalid = false,\r\n      className: derivedClassName,\r\n      value,\r\n      ...attributes\r\n    },\r\n    ref\r\n  ) => {\r\n    const [hideLabel, setHideLabel] = useState(!!value);\r\n    useEffect(() => {\r\n      setHideLabel(!!value);\r\n    }, [value]);\r\n\r\n    let textAreaClassName = 'textarea';\r\n    if (isInvalid) textAreaClassName += ' invalid';\r\n    if (labelValue && hideLabel) textAreaClassName += ' hide-label';\r\n    if (derivedClassName) textAreaClassName += ' ' + derivedClassName;\r\n\r\n    const textAreaProps = {\r\n      className: textAreaClassName,\r\n      spellCheck: false,\r\n      value,\r\n      ...attributes,\r\n      ref,\r\n    };\r\n\r\n    return (\r\n      <div className=\"textarea-container\">\r\n        {labelValue ? (\r\n          <label className=\"label\">\r\n            <span className={`label-value${hideLabel ? ' hide' : ''}`}>\r\n              {labelValue}\r\n            </span>\r\n            <TextareaAutosize {...textAreaProps} ref={ref} />\r\n          </label>\r\n        ) : (\r\n          <TextareaAutosize {...textAreaProps} ref={ref} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  ChangeEvent,\r\n  KeyboardEvent,\r\n  MouseEvent,\r\n} from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { preventClickDefault } from 'utils';\r\nimport { Button, TextArea } from 'shared';\r\nimport {\r\n  EditOutlined as EditIcon,\r\n  DeleteOutlineRounded as DeleteIcon,\r\n  DoneRounded as SubmitIcon,\r\n  CloseRounded as CancelIcon,\r\n} from '@material-ui/icons';\r\nimport './styles.scss';\r\n\r\nexport interface FieldEditorProps {\r\n  fieldName: string;\r\n  displayOnViewMode?: string;\r\n  value?: string;\r\n  initialEditMode?: boolean;\r\n  editMode?: boolean;\r\n  useIconToggler?: boolean;\r\n  onSubmit: (title: any) => any;\r\n  onDelete?: () => any;\r\n  onEditToggle?: () => any;\r\n  titles?: {\r\n    submit?: string;\r\n    cancel?: string;\r\n    delete?: string;\r\n    edit?: string;\r\n  };\r\n}\r\n\r\nexport const FieldEditor: FC<FieldEditorProps> = ({\r\n  fieldName,\r\n  displayOnViewMode,\r\n  value = '',\r\n  initialEditMode = false,\r\n  editMode: derivedEditMode,\r\n  useIconToggler = false,\r\n  onSubmit,\r\n  onDelete,\r\n  onEditToggle,\r\n  titles,\r\n}) => {\r\n  const intl = useIntl();\r\n  const [editMode, setEditMode] = useState(derivedEditMode ?? initialEditMode);\r\n  const [currentValue, setCurrentValue] = useState(value);\r\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n  const isInvalid = !currentValue.trim();\r\n\r\n  const toggleEdit = (e?: MouseEvent<HTMLElement>) => {\r\n    e?.preventDefault();\r\n    setCurrentValue(value);\r\n    setEditMode(!editMode);\r\n    if (onEditToggle) onEditToggle();\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    const value = e.target.value.replace(/\\r\\n|\\r|\\n/gm, ' ');\r\n    setCurrentValue(value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const trimmedCurrentValue = currentValue.trim();\r\n    if (!trimmedCurrentValue) return;\r\n    if (value !== trimmedCurrentValue) {\r\n      value = trimmedCurrentValue;\r\n      onSubmit(trimmedCurrentValue);\r\n    }\r\n    toggleEdit();\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Escape') toggleEdit();\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editMode) textAreaRef.current?.focus();\r\n  }, [editMode]);\r\n\r\n  const editTitle = titles?.edit || intl.formatMessage({ id: 'edit' });\r\n  const submitTitle = titles?.submit || intl.formatMessage({ id: 'submit' });\r\n  const cancelTitle = titles?.cancel || intl.formatMessage({ id: 'cancel' });\r\n  const deleteTitle = titles?.delete || intl.formatMessage({ id: 'delete' });\r\n\r\n  return (\r\n    <form className={`field-editor${editMode ? ' edit' : ''}`}>\r\n      {/* disabled textarea ignores clicks */}\r\n      {!editMode && !useIconToggler && (\r\n        <button\r\n          className=\"click-overlay\"\r\n          onClick={toggleEdit}\r\n          title={editTitle}\r\n        />\r\n      )}\r\n      <div className=\"field-editor-textarea-container\">\r\n        <TextArea\r\n          labelValue={fieldName}\r\n          title={editMode ? fieldName : undefined}\r\n          isInvalid={isInvalid}\r\n          value={\r\n            displayOnViewMode && !editMode ? displayOnViewMode : currentValue\r\n          }\r\n          rowsMax={3}\r\n          disabled={!editMode}\r\n          required={true}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          ref={textAreaRef}\r\n        />\r\n        {!editMode && useIconToggler && (\r\n          <Button\r\n            title={editTitle}\r\n            className=\"field-editor-button edit-button\"\r\n            onClick={toggleEdit}\r\n          >\r\n            <EditIcon fontSize=\"inherit\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div className=\"buttons-container\" onClick={preventClickDefault}>\r\n        {editMode && (\r\n          <>\r\n            <div>\r\n              <Button\r\n                title={submitTitle}\r\n                className=\"field-editor-button submit-button\"\r\n                onClick={handleSubmit}\r\n                disabled={isInvalid}\r\n              >\r\n                <SubmitIcon fontSize=\"inherit\" />\r\n              </Button>\r\n              <Button\r\n                title={cancelTitle}\r\n                className=\"field-editor-button\"\r\n                onClick={toggleEdit}\r\n              >\r\n                <CancelIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            </div>\r\n            {onDelete && (\r\n              <Button\r\n                title={deleteTitle}\r\n                className=\"field-editor-button\"\r\n                onClick={onDelete}\r\n              >\r\n                <DeleteIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport { Button } from 'shared';\r\nimport './styles.scss';\r\n\r\nconst HomePage: FC = () => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <main className=\"home-page\">\r\n      <h1>Trello clone</h1>\r\n      <Link to=\"/boards\">\r\n        <Button>\r\n          {intl.formatMessage({\r\n            id: 'app/get-started',\r\n            defaultMessage: 'Get started',\r\n          })}\r\n        </Button>\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'utils';\r\nimport { ActionCreator } from 'redux';\r\n\r\nexport enum BoardActionTypes {\r\n  CREATE_BOARD = 'CREATE_BOARD',\r\n  DELETE_BOARD = 'DELETE_BOARD',\r\n  CHANGE_BOARD = 'CHANGE_BOARD',\r\n  MOVE_LIST = 'MOVE_LIST',\r\n}\r\nconst {\r\n  CREATE_BOARD,\r\n  CHANGE_BOARD,\r\n  DELETE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport interface CreateBoardAction {\r\n  type: typeof CREATE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\nexport interface DeleteBoardAction {\r\n  type: typeof DELETE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    listsIds: string[];\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteBoardThunk = ActionCreator<\r\n  ThunkAction<DeleteBoardAction, AppState, void, DeleteBoardAction>\r\n>;\r\n\r\nexport interface ChangeBoardAction {\r\n  type: typeof CHANGE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveListAction {\r\n  type: typeof MOVE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type BoardActions =\r\n  | CreateBoardAction\r\n  | DeleteBoardAction\r\n  | ChangeBoardAction\r\n  | MoveListAction;\r\n\r\nexport interface BoardData {\r\n  id: string;\r\n  title: string;\r\n  lists: string[];\r\n}\r\n\r\nexport interface BoardsState {\r\n  byId: {\r\n    [prop: string]: BoardData;\r\n  };\r\n  allIds: string[];\r\n}\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  ChangeListAction,\r\n  DeleteListThunk,\r\n  MoveCardAction,\r\n} from './types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport const createList = (\r\n  boardId: string,\r\n  title: string\r\n): CreateListAction => ({\r\n  type: CREATE_LIST,\r\n  payload: { boardId, listId: v4(), title },\r\n});\r\n\r\nexport const deleteList: DeleteListThunk = (\r\n  boardId: string,\r\n  listId: string\r\n) => (dispatch, getState) => {\r\n  const { lists } = getState();\r\n  const cardsIds = lists[listId].cards;\r\n\r\n  return dispatch({\r\n    type: DELETE_LIST,\r\n    payload: {\r\n      boardId,\r\n      listId,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeList = (\r\n  listId: string,\r\n  title: string\r\n): ChangeListAction => ({\r\n  type: CHANGE_LIST,\r\n  payload: { listId, title },\r\n});\r\n\r\nexport const moveCard = (\r\n  fromListId: string,\r\n  toListId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveCardAction => ({\r\n  type: MOVE_CARD,\r\n  payload: {\r\n    fromListId,\r\n    toListId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","export enum CardActionTypes {\r\n  CREATE_CARD = 'CREATE_CARD',\r\n  DELETE_CARD = 'DELETE_CARD',\r\n  CHANGE_CARD = 'CHANGE_CARD',\r\n}\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport interface CreateCardAction {\r\n  type: typeof CREATE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteCardAction {\r\n  type: typeof DELETE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n  };\r\n}\r\n\r\nexport interface ChangeCardAction {\r\n  type: typeof CHANGE_CARD;\r\n  payload: {\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport type CardActions =\r\n  | CreateCardAction\r\n  | DeleteCardAction\r\n  | ChangeCardAction;\r\n\r\nexport interface CardData {\r\n  id: string;\r\n  content: string;\r\n}\r\n\r\nexport interface CardsState {\r\n  [prop: string]: CardData;\r\n}\r\n","import {\r\n  BoardActionTypes,\r\n  CreateBoardAction,\r\n  ChangeBoardAction,\r\n  DeleteBoardThunk,\r\n  MoveListAction,\r\n} from './types';\r\nimport { v4 } from 'uuid';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport const createBoard = (title: string): CreateBoardAction => ({\r\n  type: CREATE_BOARD,\r\n  payload: {\r\n    boardId: v4(),\r\n    title,\r\n  },\r\n});\r\n\r\nexport const deleteBoard: DeleteBoardThunk = (boardId: string) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { boards, lists } = getState();\r\n  const listsIds = boards.byId[boardId].lists;\r\n  const cardsIds = listsIds.map(id => lists[id].cards).flat();\r\n\r\n  return dispatch({\r\n    type: DELETE_BOARD,\r\n    payload: {\r\n      boardId,\r\n      listsIds,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeBoard = (\r\n  boardId: string,\r\n  title: string\r\n): ChangeBoardAction => ({\r\n  type: CHANGE_BOARD,\r\n  payload: { boardId, title },\r\n});\r\n\r\nexport const moveList = (\r\n  boardId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveListAction => ({\r\n  type: MOVE_LIST,\r\n  payload: {\r\n    boardId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","import translations from './data';\r\n\r\nexport type AvailableLanguages = keyof typeof translations;\r\n\r\nexport type EnTranslationId = keyof typeof translations['en']['data'];\r\n\r\nexport enum LocaleActionTypes {\r\n  SET_LANGUAGE = 'SET_LANGUAGE',\r\n}\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nexport interface SetLanguageAction {\r\n  type: typeof SET_LANGUAGE;\r\n  payload: {\r\n    languageCode: AvailableLanguages;\r\n    languageName: string;\r\n  };\r\n}\r\n\r\nexport type LocaleActions = SetLanguageAction;\r\n\r\nexport interface LocaleState {\r\n  languageCode: AvailableLanguages;\r\n  languageName: string;\r\n}\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport const createCard = (\r\n  listId: string,\r\n  content: string\r\n): CreateCardAction => ({\r\n  type: CREATE_CARD,\r\n  payload: { listId, cardId: v4(), content },\r\n});\r\n\r\nexport const deleteCard = (\r\n  listId: string,\r\n  cardId: string\r\n): DeleteCardAction => ({\r\n  type: DELETE_CARD,\r\n  payload: { listId, cardId },\r\n});\r\n\r\nexport const changeCard = (\r\n  cardId: string,\r\n  content: string\r\n): ChangeCardAction => ({\r\n  type: CHANGE_CARD,\r\n  payload: { cardId, content },\r\n});\r\n","import React, { FC, ReactElement, useState, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { FieldEditor } from 'shared';\r\nimport { createPortal } from 'react-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { AppState } from 'utils';\r\n\r\nexport interface CardProps {\r\n  index: number;\r\n  id: string;\r\n  onDelete: (id: string) => any;\r\n  onEdit: (id: string, newContent: string) => any;\r\n}\r\n\r\nconst optionalPortal = (style: any, element: ReactElement): ReactElement => {\r\n  if (style.position !== 'fixed') return element;\r\n  return createPortal(element, document.getElementById('draggable')!);\r\n};\r\n\r\nconst Card: FC<CardProps> = ({ index, id, onDelete, onEdit }) => {\r\n  const intl = useIntl();\r\n\r\n  const content = useSelector<AppState, string>(\r\n    ({ cards }) => cards[id].content\r\n  );\r\n\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newContent: string) => onEdit(id, newContent);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, setShouldDrag] = useState(true);\r\n  const toggleShouldDrag = () => setShouldDrag(!shouldDrag);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided =>\r\n        optionalPortal(\r\n          provided.draggableProps.style,\r\n          <div\r\n            className=\"card\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <FieldEditor\r\n              fieldName={intl.formatMessage({\r\n                id: 'cards/content',\r\n                defaultMessage: 'Content',\r\n              })}\r\n              value={content}\r\n              onSubmit={handleSubmit}\r\n              onDelete={handleDelete}\r\n              onEditToggle={toggleShouldDrag}\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(Card);\r\n","import React, { FC, memo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewCardProps {\r\n  onCreate: (content: string) => any;\r\n}\r\n\r\nconst NewCard: FC<NewCardProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div className=\"card new-card\">\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'cards/content',\r\n          defaultMessage: 'Content',\r\n        })}\r\n        displayOnViewMode={intl.formatMessage({\r\n          id: 'cards/new-card',\r\n          defaultMessage: 'New card',\r\n        })}\r\n        onSubmit={onCreate}\r\n        titles={{\r\n          edit: intl.formatMessage({ id: 'create', defaultMessage: 'Create' }),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewCard);\r\n","import React, { FC, useCallback, memo } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createCard, deleteCard, changeCard } from '../actions';\r\nimport Card from './Card';\r\nimport NewCard from './NewCard';\r\nimport { AppState } from 'utils';\r\n\r\nexport interface ListOfCardsProps {\r\n  listId: string;\r\n}\r\n\r\nconst ListOfCards: FC<ListOfCardsProps> = ({ listId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const cardsIds = useSelector<AppState, string[]>(\r\n    ({ lists }) => lists[listId]?.cards || []\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (content: string) => dispatch(createCard(listId, content)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (cardId: string) => dispatch(deleteCard(listId, cardId)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (cardId: string, content: string) => dispatch(changeCard(cardId, content)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Droppable droppableId={listId} type=\"card\">\r\n        {provided => (\r\n          <ul\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className=\"list-of-cards\"\r\n          >\r\n            {cardsIds.map((id, index) => (\r\n              <li key={id}>\r\n                <Card\r\n                  index={index}\r\n                  id={id}\r\n                  onDelete={onDelete}\r\n                  onEdit={onEdit}\r\n                />\r\n              </li>\r\n            ))}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n      <NewCard onCreate={onCreate} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfCards);\r\n","import React, { FC, useState, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { FieldEditor } from 'shared';\r\nimport ListOfCard from 'cards';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from 'utils';\r\nimport { useIntl } from 'react-intl';\r\n\r\nexport interface ListProps {\r\n  index: number;\r\n  id: string;\r\n  onEdit: (listId: string, newTitle: string) => any;\r\n  onDelete: (listId: string) => any;\r\n}\r\n\r\nconst List: FC<ListProps> = ({ index, id, onEdit, onDelete }) => {\r\n  const intl = useIntl();\r\n\r\n  const title = useSelector<AppState, string>(({ lists }) => lists[id].title);\r\n\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newTitle: string) => onEdit(id, newTitle);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, setShouldDrag] = useState(true);\r\n  const toggleShouldDrag = () => setShouldDrag(!shouldDrag);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided => (\r\n        <div\r\n          className=\"list\"\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <header>\r\n            <FieldEditor\r\n              fieldName={intl.formatMessage({\r\n                id: 'lists/title',\r\n                defaultMessage: 'Title',\r\n              })}\r\n              value={title}\r\n              onDelete={handleDelete}\r\n              onSubmit={handleSubmit}\r\n              onEditToggle={toggleShouldDrag}\r\n            />\r\n          </header>\r\n          <ListOfCard listId={id} />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(List);\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewListProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewList: FC<NewListProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div className=\"list new-list\">\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'lists/title',\r\n          defaultMessage: 'Title',\r\n        })}\r\n        onSubmit={onCreate}\r\n        displayOnViewMode={intl.formatMessage({\r\n          id: 'lists/new-list',\r\n          defaultMessage: 'Create card',\r\n        })}\r\n        titles={{\r\n          edit: intl.formatMessage({ id: 'create', defaultMessage: 'Create' }),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewList;\r\n","import React, { FC, memo, useCallback } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from 'utils';\r\nimport { createList, deleteList, changeList, moveCard } from '../actions';\r\nimport { moveList } from 'boards/actions';\r\nimport List from './List';\r\nimport NewList from './NewList';\r\n\r\nexport interface ListOfListsProps {\r\n  boardId: string;\r\n}\r\n\r\nconst ListOfLists: FC<ListOfListsProps> = ({ boardId }) => {\r\n  const lists = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.byId[boardId]?.lists || []\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createList(boardId, title)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (listId: string) => dispatch(deleteList(boardId, listId)),\r\n    [boardId, dispatch]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (listId: string, title: string) => dispatch(changeList(listId, title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onListMove = useCallback(\r\n    (fromIndex: number, toIndex: number) =>\r\n      dispatch(moveList(boardId, fromIndex, toIndex)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onCardMove = useCallback(\r\n    (\r\n      fromListId: string,\r\n      toListId: string,\r\n      fromIndex: number,\r\n      toIndex: number\r\n    ) => dispatch(moveCard(fromListId, toListId, fromIndex, toIndex)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, type } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    if (type === 'card') {\r\n      const { droppableId: fromListId, index: fromIndex } = source;\r\n      const { droppableId: toListId, index: toIndex } = destination;\r\n\r\n      if (fromListId === toListId && fromIndex === toIndex) {\r\n        return;\r\n      }\r\n\r\n      onCardMove(fromListId, toListId, fromIndex, toIndex);\r\n    } else if (type === 'list') {\r\n      if (source.index === destination.index) return;\r\n\r\n      onListMove(source.index, destination.index);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"list-of-lists\">\r\n        <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"list\">\r\n          {provided => (\r\n            <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n              {lists.map((id, index) => (\r\n                <li key={id}>\r\n                  <List\r\n                    index={index}\r\n                    id={id}\r\n                    onEdit={onEdit}\r\n                    onDelete={onDelete}\r\n                  />\r\n                </li>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n        <NewList onCreate={onCreate} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfLists);\r\n","import React, { FC } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport { Button } from 'shared';\r\nimport './styles.scss';\r\n\r\nexport interface NotFoundPageProps {\r\n  message?: string;\r\n}\r\n\r\nconst NotFoundPage: FC<NotFoundPageProps> = ({ message }) => {\r\n  const history = useHistory();\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <main className=\"not-found-page\">\r\n      <div className=\"message\">\r\n        <span className=\"error-code\">404</span>\r\n        <p>{message}</p>\r\n        <Button onClick={history.goBack}>\r\n          {intl.formatMessage({\r\n            id: 'app/go-back',\r\n            defaultMessage: 'Go back',\r\n          })}\r\n        </Button>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default NotFoundPage;\r\n","import React, { FC, WheelEvent } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR, AppState } from 'utils';\r\nimport './styles.scss';\r\nimport ListOfLists from 'lists';\r\nimport NotFoundPage from 'app/NotFoundPage/NotFoundPage';\r\n\r\nexport interface BoardPageProps extends RouteComponentProps<{ id: string }> {}\r\n\r\nconst BoardPage: FC<BoardPageProps> = ({ match }) => {\r\n  const intl = useIntl();\r\n\r\n  const boardId = match.params.id;\r\n  const boardExist = useSelector<AppState, boolean>(\r\n    state => !!state.boards.byId[boardId]\r\n  );\r\n\r\n  if (boardExist) {\r\n    const onWheel = ({\r\n      target,\r\n      currentTarget,\r\n      deltaY,\r\n    }: WheelEvent<HTMLDivElement>) => {\r\n      if ((target as HTMLElement)?.closest('.list')) return;\r\n      currentTarget.scrollTo({\r\n        left: currentTarget.scrollLeft +=\r\n          deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n        behavior: 'smooth',\r\n      });\r\n    };\r\n\r\n    return (\r\n      <main className=\"board-page\" onWheel={onWheel}>\r\n        <ListOfLists boardId={boardId} />\r\n      </main>\r\n    );\r\n  } else\r\n    return (\r\n      <NotFoundPage\r\n        message={intl.formatMessage({\r\n          id: 'app/board404',\r\n          defaultMessage: \"Such board doesn't exist\",\r\n        })}\r\n      />\r\n    );\r\n};\r\n\r\nexport default BoardPage;\r\n","import React, { FC, useState, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FieldEditor } from 'shared';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from 'utils';\r\nimport { useIntl } from 'react-intl';\r\n\r\nexport interface BoardLinkProps {\r\n  id: string;\r\n  onEdit: (id: string, newTitle: string) => any;\r\n  onDelete: (id: string) => any;\r\n}\r\n\r\nconst BoardLink: FC<BoardLinkProps> = ({ id, onEdit, onDelete }) => {\r\n  const intl = useIntl();\r\n\r\n  const title = useSelector<AppState, string>(\r\n    ({ boards }) => boards.byId[id].title\r\n  );\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const toggleEdit = () => setEditMode(!editMode);\r\n\r\n  const FieldEditProps = {\r\n    fieldName: intl.formatMessage({\r\n      id: 'boards/title',\r\n      defaultMessage: 'Title',\r\n    }),\r\n    value: title,\r\n    useIconToggler: true,\r\n    editMode,\r\n    onEditToggle: toggleEdit,\r\n    onSubmit: (newTitle: string) => onEdit(id, newTitle),\r\n    onDelete: () => onDelete(id),\r\n  };\r\n\r\n  return editMode ? (\r\n    <div className=\"board-link\">\r\n      <FieldEditor {...FieldEditProps} />\r\n    </div>\r\n  ) : (\r\n    <NavLink to={`/boards/${id}`} className=\"board-link\">\r\n      <FieldEditor {...FieldEditProps} />\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default memo(BoardLink);\r\n","import React, { FC, memo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewBoardProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewBoard: FC<NewBoardProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board-link new-board\">\r\n        <FieldEditor\r\n          fieldName={intl.formatMessage({\r\n            id: 'boards/title',\r\n            defaultMessage: 'Title',\r\n          })}\r\n          displayOnViewMode={intl.formatMessage({\r\n            id: 'boards/new-board',\r\n            defaultMessage: 'Create board',\r\n          })}\r\n          onSubmit={onCreate}\r\n          titles={{\r\n            edit: intl.formatMessage({\r\n              id: 'create',\r\n              defaultMessage: 'Create',\r\n            }),\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewBoard);\r\n","import React, { FC, WheelEvent, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR, AppState } from 'utils';\r\nimport BoardLink from './BoardLink';\r\nimport NewBoard from './NewBoard';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createBoard, deleteBoard, changeBoard } from 'boards/actions';\r\n\r\nconst BoardsNavigation: FC = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const boardsIds = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.allIds\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createBoard(title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (boardId: string) => {\r\n      if (history.location.pathname.includes(boardId)) history.push('/boards/');\r\n      dispatch(deleteBoard(boardId));\r\n    },\r\n    [dispatch, history]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (boardId: string, newTitle: string) => {\r\n      dispatch(changeBoard(boardId, newTitle));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onWheel = ({\r\n    target,\r\n    currentTarget,\r\n    deltaY,\r\n  }: WheelEvent<HTMLDivElement>) => {\r\n    if ((target as HTMLElement)?.closest('.field-editor.edit')) return;\r\n    currentTarget.scrollTo({\r\n      left: currentTarget.scrollLeft +=\r\n        deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <nav className=\"boards-navigation\" onWheel={onWheel}>\r\n      <ul>\r\n        {boardsIds.map(id => (\r\n          <li key={id}>\r\n            <BoardLink id={id} onDelete={onDelete} onEdit={onEdit} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <NewBoard onCreate={onCreate} />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default BoardsNavigation;\r\n","import React, { FC } from 'react';\nimport { IntlProvider, useIntl } from 'react-intl';\nimport { Switch, Route } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport 'normalize.css';\nimport './App.scss';\nimport { AppState } from 'utils';\nimport { AvailableLanguages } from './localization/types';\nimport translations from './localization/data';\nimport Header from './Header/Header';\nimport HomePage from './HomePage/HomePage';\nimport BoardPage from './BoardPage/BoardPage';\nimport BoardsNavigation from 'boards';\nimport NotFoundPage from './NotFoundPage/NotFoundPage';\n\nconst App: FC = () => {\n  const locale = useSelector<AppState, AvailableLanguages>(\n    ({ locale }) => locale.languageCode\n  );\n\n  return (\n    <IntlProvider locale={locale} messages={translations[locale].data}>\n      <Header />\n      <Switch>\n        <Route path=\"/\" exact={true} component={HomePage} />\n        <Route\n          path=\"/boards\"\n          render={() => (\n            <>\n              <BoardsNavigation />\n              <Route path=\"/boards/:id\" component={BoardPage} />\n            </>\n          )}\n        />\n        <Route path=\"*\" component={PageNotFound} />\n      </Switch>\n    </IntlProvider>\n  );\n};\n\nconst PageNotFound: FC = () => {\n  const intl = useIntl();\n\n  return (\n    <NotFoundPage\n      message={intl.formatMessage({\n        id: 'app/page404',\n        defaultMessage: \"Such page doesn't exist\",\n      })}\n    />\n  );\n};\n\nexport default App;\n","import throttle from 'lodash/throttle';\r\nimport store from './store';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (!serializedState) return;\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const saveState = () => {\r\n  try {\r\n    const serializedState = JSON.stringify(store.getState());\r\n    localStorage.setItem('state', serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const watchState = throttle(() => {\r\n  store.subscribe(saveState);\r\n}, 1000);\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  AvailableLanguages,\r\n  LocaleActionTypes,\r\n  LocaleState,\r\n  LocaleActions,\r\n  SetLanguageAction,\r\n} from './types';\r\nimport translations from './data';\r\n\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nconst preferredLanguage = navigator.language?.slice(0, 2);\r\nlet language: AvailableLanguages = 'en';\r\nif (preferredLanguage in translations)\r\n  language = preferredLanguage as AvailableLanguages;\r\n\r\nconst initialState: LocaleState = {\r\n  languageCode: language,\r\n  languageName: translations[language].name,\r\n};\r\n\r\nconst localeReducer: Reducer<LocaleState, LocaleActions> = (\r\n  state = initialState,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case SET_LANGUAGE: {\r\n      return {\r\n        ...state,\r\n        ...(payload as SetLanguageAction['payload']),\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default localeReducer;\r\n","import {\r\n  BoardActionTypes,\r\n  BoardsState,\r\n  BoardActions,\r\n  CreateBoardAction,\r\n  DeleteBoardAction,\r\n  ChangeBoardAction,\r\n  MoveListAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n} from 'lists/types';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\nconst { CREATE_LIST, DELETE_LIST } = ListActionTypes;\r\n\r\nconst initialState: BoardsState = {\r\n  byId: {},\r\n  allIds: [],\r\n};\r\n\r\nconst boardReducer: Reducer<\r\n  BoardsState,\r\n  BoardActions | CreateListAction | DeleteListAction\r\n> = (state = initialState, { type, payload }): BoardsState => {\r\n  switch (type) {\r\n    case CREATE_BOARD: {\r\n      const { boardId, title } = payload as CreateBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { id: boardId, title, lists: [] },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds: [...state.allIds, boardId],\r\n      };\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { boardId } = payload as DeleteBoardAction['payload'];\r\n\r\n      const { [boardId]: ignore, ...byId } = state.byId;\r\n      const allIds = state.allIds.filter(id => id !== boardId);\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds,\r\n      };\r\n    }\r\n\r\n    case CHANGE_BOARD: {\r\n      const { boardId, title } = payload as ChangeBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { ...state.byId[boardId], title },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case MOVE_LIST: {\r\n      const {\r\n        boardId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveListAction['payload'];\r\n\r\n      const byId = { ...state.byId };\r\n      const board = { ...byId[boardId] };\r\n      const lists = [...board.lists];\r\n\r\n      const list = lists.splice(fromIndex, 1);\r\n      lists.splice(toIndex, 0, ...list);\r\n\r\n      board.lists = lists;\r\n      byId[boardId] = board;\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case CREATE_LIST: {\r\n      const { boardId, listId } = payload as CreateListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n      board.lists = [...board.lists, listId];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const {\r\n        boardId,\r\n        listId: targetListId,\r\n      } = payload as DeleteListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n\r\n      board.lists = board.lists.filter(listId => listId !== targetListId);\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default boardReducer;\r\n","import {\r\n  ListActionTypes,\r\n  ListsState,\r\n  ListActions,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n  ChangeListAction,\r\n  MoveCardAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n} from 'cards/types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\nconst { CREATE_CARD, DELETE_CARD } = CardActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: ListsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  ListsState,\r\n  ListActions | CreateCardAction | DeleteCardAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): ListsState => {\r\n  switch (type) {\r\n    case CREATE_LIST: {\r\n      const { listId, title } = payload as CreateListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { id: listId, title, cards: [] },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { listId } = payload as DeleteListAction['payload'];\r\n\r\n      const { [listId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_LIST: {\r\n      const { listId, title } = payload as ChangeListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], title },\r\n      };\r\n    }\r\n\r\n    case CREATE_CARD: {\r\n      const { listId, cardId } = payload as CreateCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = [...list.cards, cardId];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { listId, cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = list.cards.filter(id => id !== cardId);\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case MOVE_CARD: {\r\n      const {\r\n        fromListId,\r\n        toListId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveCardAction['payload'];\r\n\r\n      const newState = { ...state };\r\n\r\n      const fromList = { ...newState[fromListId] };\r\n      fromList.cards = [...fromList.cards];\r\n      const card = fromList.cards.splice(fromIndex, 1);\r\n      newState[fromListId] = fromList;\r\n\r\n      const toList = { ...newState[toListId] };\r\n      toList.cards = [...toList.cards];\r\n      toList.cards.splice(toIndex, 0, ...card);\r\n      newState[toListId] = toList;\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { listsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: ListsState = {};\r\n      for (const prop in state) {\r\n        if (state.hasOwnProperty(prop) && !listsIds.includes(prop)) {\r\n          newState[prop] = state[prop];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  CardActionTypes,\r\n  CardsState,\r\n  CardActions,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nimport { ListActionTypes, DeleteListAction } from 'lists/types';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\nconst { DELETE_LIST } = ListActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: CardsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  CardsState,\r\n  CardActions | DeleteListAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): CardsState => {\r\n  switch (type) {\r\n    case CREATE_CARD: {\r\n      const { cardId, content } = payload as CreateCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { id: cardId, content },\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const { [cardId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_CARD: {\r\n      const { cardId, content } = payload as ChangeCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { ...state[cardId], content },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { cardsIds } = payload as DeleteListAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { cardsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { combineReducers } from 'redux';\r\nimport localeReducer from './localization/reducer';\r\nimport boardReducer from 'boards/reducer';\r\nimport listReducer from 'lists/reducer';\r\nimport cardReducer from 'cards/reducer';\r\n\r\nexport default combineReducers({\r\n  locale: localeReducer,\r\n  boards: boardReducer,\r\n  lists: listReducer,\r\n  cards: cardReducer,\r\n});\r\n","import { Store, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { AppState, AllActions } from 'utils';\r\nimport { loadState } from './localStorage';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = [ReduxThunk];\r\n\r\nconst store: Store<AppState, AllActions> = createStore(\r\n  rootReducer,\r\n  loadState(),\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from 'app/App';\nimport store from 'app/store';\nimport { watchState } from 'app/localStorage';\n\nwatchState();\n\nReactDOM.render(\n  <StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}