{"version":3,"sources":["utils/lib.ts","utils/constants.ts","utils/hooks.ts","utils/index.ts","app/localization/types.ts","app/localization/data/index.ts","lists/types.ts","app/localization/actions.ts","app/Header/Components/SelectLanguage.tsx","app/Header/Components/Menu.tsx","app/Header/Header.tsx","shared/Button/index.tsx","shared/TextArea/index.tsx","shared/FieldEditor/index.tsx","app/HomePage/HomePage.tsx","boards/types.ts","lists/actions.ts","cards/types.ts","boards/actions.ts","cards/actions.ts","cards/components/Card.tsx","cards/components/NewCard.tsx","cards/components/ListOfCards.tsx","lists/components/List.tsx","lists/components/NewList.tsx","lists/components/ListOfLists.tsx","app/NotFoundPage/NotFoundPage.tsx","app/BoardPage/BoardPage.tsx","boards/components/BoardLink.tsx","boards/components/NewBoard.tsx","boards/components/BoardsNavigation.tsx","app/App.tsx","app/localStorage.ts","app/localization/reducer.ts","boards/reducer.ts","lists/reducer.ts","cards/reducer.ts","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["preventDefault","e","closestByReference","element","ref","currentElement","parentElement","parentNode","nodeType","removeLineBreaks","value","replace","HORIZONTAL_SCROLLING_SPEED_FACTOR","useStateWithCallback","initialState","callback","useState","state","setState","useSwitchWithCallback","useToggle","useCallbackOnExternalAction","condition","useEffect","handler","target","document","addEventListener","removeEventListener","LocaleActionTypes","translations","en","name","translation","ru","SET_LANGUAGE","ListActionTypes","SelectLanguage","intl","useIntl","dispatch","useDispatch","language","useSelector","locale","languageCode","type","payload","code","languageName","currentLanguage","setCurrentLanguage","className","formatMessage","id","defaultMessage","onChange","Object","entries","map","data","key","Menu","menuRef","useRef","expand","toggleExpand","current","onClick","Header","to","exact","Button","forwardRef","derivedClassName","attributes","TextArea","labelValue","isInvalid","hideLabel","setHideLabel","textAreaClassName","textAreaProps","spellCheck","TextareaAutosize","FieldEditor","fieldName","displayOnViewMode","titles","initialEditMode","onEditToggle","iconToggle","exitOnSubmit","onSubmit","onDelete","textAreaRef","formRef","editMode","enterEditMode","exitEditMode","currentValue","setCurrentValue","trim","handleSubmit","trimmedCurrentValue","focus","editTitle","edit","submitTitle","submit","cancelTitle","cancel","deleteTitle","delete","title","undefined","rowsMax","disabled","required","onKeyDown","fontSize","HomePage","CREATE_LIST","DELETE_LIST","CHANGE_LIST","MOVE_CARD","BoardActionTypes","CREATE_BOARD","CHANGE_BOARD","DELETE_BOARD","MOVE_LIST","CardActionTypes","CREATE_CARD","DELETE_CARD","CHANGE_CARD","memo","index","onEdit","content","cards","handleDelete","newContent","shouldDrag","toggleShouldDrag","draggableId","disableInteractiveElementBlocking","provided","style","draggableProps","dragHandleProps","innerRef","position","createPortal","getElementById","onCreate","listId","cardsIds","lists","useCallback","cardId","v4","createCard","deleteCard","changeCard","droppableId","droppableProps","placeholder","newTitle","NewList","boardId","boards","byId","createList","getState","deleteList","changeList","onListMove","fromIndex","toIndex","moveList","onCardMove","fromListId","toListId","moveCard","onDragEnd","result","destination","source","direction","NotFoundPage","message","history","useHistory","goBack","BoardPage","match","params","onWheel","currentTarget","deltaY","window","innerHeight","closest","scrollTo","left","scrollLeft","toggleEditMode","FieldEditProps","BoardsNavigation","boardsIds","allIds","createBoard","location","pathname","includes","push","listsIds","flat","deleteBoard","changeBoard","PageNotFound","App","messages","path","component","render","saveState","serializedState","JSON","stringify","store","localStorage","setItem","err","watchState","throttle","subscribe","preferredLanguage","navigator","slice","localeReducer","boardReducer","filter","board","list","splice","targetListId","listReducer","rest","newState","fromList","card","toList","prop","hasOwnProperty","combineReducers","cardReducer","middleware","ReduxThunk","createStore","rootReducer","getItem","parse","loadState","composeWithDevTools","applyMiddleware","ReactDOM","basename","process"],"mappings":"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","file":"static/js/main.f2490afb.chunk.js","sourcesContent":["import { SyntheticEvent } from 'react';\r\n\r\nexport const preventDefault = (e: Event | SyntheticEvent) => e.preventDefault();\r\n\r\nexport const cloneDeep = <T extends {} | []>(structure: T): T =>\r\n  JSON.parse(JSON.stringify(structure));\r\n\r\nexport const closestByReference = (element: HTMLElement, ref: HTMLElement) => {\r\n  let currentElement: HTMLElement | Node | null = element;\r\n\r\n  do {\r\n    if (currentElement === ref) return currentElement;\r\n    currentElement = currentElement.parentElement || currentElement.parentNode;\r\n  } while (currentElement !== null && currentElement.nodeType === 1);\r\n\r\n  return null;\r\n};\r\n\r\nexport const removeLineBreaks = (value: string) =>\r\n  value.replace(/\\r\\n|\\r|\\n/gm, ' ');\r\n","export const HORIZONTAL_SCROLLING_SPEED_FACTOR = 0.75;\r\n","import { useState, useEffect } from 'react';\r\nimport { closestByReference } from './lib';\r\n\r\nexport const useStateWithCallback = <S>(\r\n  initialState: S,\r\n  callback?: (state: S) => any\r\n) => {\r\n  const [state, setState] = useState(initialState);\r\n  return [\r\n    state,\r\n    value => {\r\n      if (callback) callback(value);\r\n      setState(value);\r\n    },\r\n  ] as [S, (value: S) => void];\r\n};\r\n\r\nexport const useSwitchWithCallback = (\r\n  initialState: boolean,\r\n  callback?: (state: boolean) => any\r\n) => {\r\n  const [state, setState] = useStateWithCallback(initialState, callback);\r\n  const enable = () => setState(true);\r\n  const disable = () => setState(false);\r\n  return [state, enable, disable] as [boolean, () => void, () => void];\r\n};\r\n\r\nexport const useToggle = (initialState: boolean) => {\r\n  const [state, setState] = useState(initialState);\r\n  const toggleState = () => setState(!state);\r\n  return [state, toggleState] as [boolean, () => void];\r\n};\r\n\r\nexport const useCallbackOnExternalAction = (\r\n  element: HTMLElement | null,\r\n  callback: () => any,\r\n  condition?: boolean\r\n) => {\r\n  useEffect(() => {\r\n    if (!condition || !element) return;\r\n\r\n    const handler = ({ target }: Event) => {\r\n      if (!closestByReference(target as HTMLElement, element)) callback();\r\n    };\r\n\r\n    document.addEventListener('click', handler);\r\n    document.addEventListener('focusin', handler);\r\n    return () => {\r\n      document.removeEventListener('click', handler);\r\n      document.removeEventListener('focusin', handler);\r\n    };\r\n  }, [element, callback, condition]);\r\n};\r\n","export * from './types';\r\nexport * from './constants';\r\nexport * from './lib';\r\nexport * from './hooks';\r\n","import translations from './data';\r\n\r\nexport type AvailableLanguages = keyof typeof translations;\r\n\r\nexport type EnTranslationId = keyof typeof translations['en']['translation'];\r\n\r\nexport enum LocaleActionTypes {\r\n  SET_LANGUAGE = 'SET_LANGUAGE',\r\n}\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nexport interface SetLanguageAction {\r\n  type: typeof SET_LANGUAGE;\r\n  payload: {\r\n    languageCode: string;\r\n    languageName: string;\r\n  };\r\n}\r\n\r\nexport type LocaleActions = SetLanguageAction;\r\n\r\nexport interface LocaleState {\r\n  languageCode: string;\r\n  languageName: string;\r\n}\r\n","import englishTranslation from './en.json';\r\nimport russianTranslation from './ru.json';\r\n\r\ninterface Translations {\r\n  [prop: string]: {\r\n    name: string;\r\n    translation: {\r\n      [prop: string]: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst translations: Translations = {\r\n  en: {\r\n    name: 'english',\r\n    translation: englishTranslation,\r\n  },\r\n  ru: {\r\n    name: 'russian',\r\n    translation: russianTranslation,\r\n  },\r\n};\r\n\r\nexport default translations;\r\n","import { ActionCreator } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'utils';\r\n\r\nexport enum ListActionTypes {\r\n  CREATE_LIST = 'CREATE_LIST',\r\n  DELETE_LIST = 'DELETE_LIST',\r\n  CHANGE_LIST = 'CHANGE_LIST',\r\n  MOVE_CARD = 'MOVE_CARD',\r\n}\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport interface CreateListAction {\r\n  type: typeof CREATE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteListAction {\r\n  type: typeof DELETE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteListThunk = ActionCreator<\r\n  ThunkAction<DeleteListAction, AppState, void, DeleteListAction>\r\n>;\r\n\r\nexport interface ChangeListAction {\r\n  type: typeof CHANGE_LIST;\r\n  payload: {\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveCardAction {\r\n  type: typeof MOVE_CARD;\r\n  payload: {\r\n    fromListId: string;\r\n    toListId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type ListActions =\r\n  | CreateListAction\r\n  | DeleteListAction\r\n  | ChangeListAction\r\n  | MoveCardAction;\r\n\r\nexport interface ListData {\r\n  id: string;\r\n  title: string;\r\n  cards: string[];\r\n}\r\n\r\nexport interface ListsState {\r\n  [prop: string]: ListData;\r\n}\r\n","import translations from './data';\r\nimport { LocaleActionTypes, SetLanguageAction } from './types';\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nexport type SetLanguageActionCreator = (code: string) => SetLanguageAction;\r\n\r\nexport const setLanguage: SetLanguageActionCreator = code => ({\r\n  type: SET_LANGUAGE,\r\n  payload: { languageCode: code, languageName: translations[code].name },\r\n});\r\n","import React, { FC, ChangeEvent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { setLanguage } from 'app/localization/actions';\r\nimport translations from 'app/localization/data';\r\nimport { AppState, useStateWithCallback } from 'utils';\r\n\r\nconst SelectLanguage: FC = () => {\r\n  const intl = useIntl();\r\n  const dispatch = useDispatch();\r\n  const language = useSelector<AppState, string>(\r\n    state => state.locale.languageCode\r\n  );\r\n  const [currentLanguage, setCurrentLanguage] = useStateWithCallback<string>(\r\n    language,\r\n    state => dispatch(setLanguage(state))\r\n  );\r\n\r\n  const onChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    setCurrentLanguage(e.target.value);\r\n  };\r\n\r\n  // TODO: create custom components\r\n  return (\r\n    <label className=\"change-language\">\r\n      {intl.formatMessage({\r\n        id: 'app/change-language',\r\n        defaultMessage: 'Change language',\r\n      })}\r\n      <select\r\n        value={currentLanguage}\r\n        onChange={onChange}\r\n        className=\"language-select\"\r\n      >\r\n        {Object.entries(translations).map(([code, data]) => (\r\n          <option key={code} value={code} className=\"language-option\">\r\n            {data.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default SelectLanguage;\r\n","import React, { FC, useRef } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useToggle, useCallbackOnExternalAction } from 'utils';\r\nimport SelectLanguage from './SelectLanguage';\r\n\r\nconst Menu: FC = () => {\r\n  const intl = useIntl();\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const [expand, toggleExpand] = useToggle(false);\r\n\r\n  useCallbackOnExternalAction(menuRef.current, toggleExpand, expand);\r\n\r\n  return (\r\n    <div className={`site-menu${expand ? ' expand' : ''}`} ref={menuRef}>\r\n      <button onClick={toggleExpand} className=\"toggler\">\r\n        {expand\r\n          ? intl.formatMessage({\r\n              id: 'app/close-menu',\r\n              defaultMessage: 'Close',\r\n            })\r\n          : intl.formatMessage({ id: 'app/open-menu', defaultMessage: 'Menu' })}\r\n      </button>\r\n      <div className=\"dropdown\">\r\n        <div className=\"dropdown-inner\">\r\n          <SelectLanguage />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport './styles.scss';\r\nimport Menu from './Components/Menu';\r\n\r\nconst Header: FC = () => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <header className=\"site-header\">\r\n      <div className=\"placeholder\" />\r\n      <nav className=\"site-navigation\">\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\" exact={true}>\r\n              {intl.formatMessage({ id: 'app/home', defaultMessage: 'Home' })}\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/boards\">\r\n              {intl.formatMessage({\r\n                id: 'app/boards',\r\n                defaultMessage: 'Boards',\r\n              })}\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <Menu />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { forwardRef, ComponentProps } from 'react';\r\nimport './styles.scss';\r\n\r\nexport const Button = forwardRef<HTMLButtonElement, ComponentProps<'button'>>(\r\n  ({ className: derivedClassName = '', ...attributes }, ref) => {\r\n    let className = 'button';\r\n    if (derivedClassName) className += ' ' + derivedClassName;\r\n    return <button className={className} {...attributes} ref={ref} />;\r\n  }\r\n);\r\n","import React, { useState, forwardRef, useEffect } from 'react';\r\nimport { TextareaAutosize, TextareaAutosizeProps } from '@material-ui/core';\r\nimport './styles.scss';\r\n\r\nexport interface TextAreaProps extends TextareaAutosizeProps {\r\n  labelValue?: string;\r\n  isInvalid?: boolean;\r\n}\r\n\r\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\r\n  (\r\n    {\r\n      labelValue = false,\r\n      isInvalid = false,\r\n      className: derivedClassName,\r\n      value,\r\n      ...attributes\r\n    },\r\n    ref\r\n  ) => {\r\n    const [hideLabel, setHideLabel] = useState(!!value);\r\n    useEffect(() => {\r\n      setHideLabel(!!value);\r\n    }, [value]);\r\n\r\n    let textAreaClassName = 'textarea';\r\n    if (isInvalid) textAreaClassName += ' invalid';\r\n    if (labelValue && hideLabel) textAreaClassName += ' hide-label';\r\n    if (derivedClassName) textAreaClassName += ' ' + derivedClassName;\r\n\r\n    const textAreaProps = {\r\n      className: textAreaClassName,\r\n      spellCheck: false,\r\n      value,\r\n      ...attributes,\r\n      ref,\r\n    };\r\n\r\n    return (\r\n      <div className=\"textarea-container\">\r\n        {labelValue ? (\r\n          <label className=\"label\">\r\n            <span className={`label-value${hideLabel ? ' hide' : ''}`}>\r\n              {labelValue}\r\n            </span>\r\n            <TextareaAutosize {...textAreaProps} ref={ref} />\r\n          </label>\r\n        ) : (\r\n          <TextareaAutosize {...textAreaProps} ref={ref} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  ChangeEvent,\r\n  KeyboardEvent,\r\n} from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport {\r\n  preventDefault,\r\n  useCallbackOnExternalAction,\r\n  removeLineBreaks,\r\n  useSwitchWithCallback,\r\n  AnyFunction,\r\n} from 'utils';\r\nimport { Button, TextArea } from 'shared';\r\nimport {\r\n  EditOutlined as EditIcon,\r\n  DeleteOutlineRounded as DeleteIcon,\r\n  DoneRounded as SubmitIcon,\r\n  CloseRounded as CancelIcon,\r\n} from '@material-ui/icons';\r\nimport './styles.scss';\r\n\r\ninterface Titles {\r\n  submit?: string;\r\n  cancel?: string;\r\n  delete?: string;\r\n  edit?: string;\r\n}\r\n\r\nexport interface FieldEditorProps {\r\n  fieldName: string;\r\n  value?: string;\r\n  displayOnViewMode?: string;\r\n  titles?: Titles;\r\n  initialEditMode?: boolean;\r\n  onEditToggle?: AnyFunction;\r\n  iconToggle?: boolean;\r\n  exitOnSubmit?: boolean;\r\n  onSubmit: AnyFunction;\r\n  onDelete?: AnyFunction;\r\n}\r\n\r\nexport const FieldEditor: FC<FieldEditorProps> = ({\r\n  fieldName,\r\n  value = '',\r\n  displayOnViewMode,\r\n  titles,\r\n  initialEditMode = false,\r\n  onEditToggle,\r\n  iconToggle = false,\r\n  exitOnSubmit = true,\r\n  onSubmit,\r\n  onDelete,\r\n}) => {\r\n  const intl = useIntl();\r\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n  const formRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [editMode, enterEditMode, exitEditMode] = useSwitchWithCallback(\r\n    initialEditMode,\r\n    onEditToggle\r\n  );\r\n  const [currentValue, setCurrentValue] = useState(value);\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setCurrentValue(removeLineBreaks(e.target.value));\r\n  };\r\n  const isInvalid = !currentValue.trim();\r\n\r\n  const handleSubmit = () => {\r\n    if (isInvalid) return;\r\n\r\n    const trimmedCurrentValue = currentValue.trim();\r\n    if (value !== trimmedCurrentValue) {\r\n      onSubmit(trimmedCurrentValue);\r\n    }\r\n\r\n    if (exitOnSubmit) exitEditMode();\r\n    else setCurrentValue('');\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Escape') exitEditMode();\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editMode) textAreaRef.current?.focus();\r\n  }, [editMode]);\r\n\r\n  useEffect(() => {\r\n    setCurrentValue(value);\r\n  }, [value, editMode]);\r\n\r\n  useCallbackOnExternalAction(formRef.current, exitEditMode, editMode);\r\n\r\n  const editTitle = titles?.edit || intl.formatMessage({ id: 'edit' });\r\n  const submitTitle = titles?.submit || intl.formatMessage({ id: 'submit' });\r\n  const cancelTitle = titles?.cancel || intl.formatMessage({ id: 'cancel' });\r\n  const deleteTitle = titles?.delete || intl.formatMessage({ id: 'delete' });\r\n\r\n  return (\r\n    <div className={`field-editor${editMode ? ' edit' : ''}`} ref={formRef}>\r\n      <div className=\"field-editor-textarea-container\">\r\n        <TextArea\r\n          labelValue={fieldName}\r\n          title={editMode ? fieldName : undefined}\r\n          isInvalid={isInvalid}\r\n          value={\r\n            displayOnViewMode && !editMode ? displayOnViewMode : currentValue\r\n          }\r\n          rowsMax={3}\r\n          disabled={!editMode}\r\n          required={true}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          ref={textAreaRef}\r\n        />\r\n        <div className=\"default-prevention-boundary\" onClick={preventDefault}>\r\n          {!editMode &&\r\n            (iconToggle ? (\r\n              <Button\r\n                className=\"field-editor-button edit-button\"\r\n                title={editTitle}\r\n                onClick={enterEditMode}\r\n              >\r\n                <EditIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            ) : (\r\n              // disabled textarea ignores clicks\r\n              <button\r\n                className=\"click-overlay\"\r\n                title={editTitle}\r\n                onClick={enterEditMode}\r\n              />\r\n            ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"buttons-container\">\r\n        {editMode && (\r\n          <>\r\n            <div>\r\n              <Button\r\n                className=\"field-editor-button submit-button\"\r\n                title={submitTitle}\r\n                onClick={handleSubmit}\r\n                disabled={isInvalid}\r\n              >\r\n                <SubmitIcon fontSize=\"inherit\" />\r\n              </Button>\r\n              <Button\r\n                className=\"field-editor-button\"\r\n                title={cancelTitle}\r\n                onClick={exitEditMode}\r\n              >\r\n                <CancelIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            </div>\r\n            {onDelete && (\r\n              <Button\r\n                className=\"field-editor-button\"\r\n                title={deleteTitle}\r\n                onClick={onDelete}\r\n              >\r\n                <DeleteIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport { Button } from 'shared';\r\nimport './styles.scss';\r\n\r\nconst HomePage: FC = () => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <main className=\"home-page\">\r\n      <h1>Trello clone</h1>\r\n      <Link to=\"/boards\">\r\n        <Button>\r\n          {intl.formatMessage({\r\n            id: 'app/get-started',\r\n            defaultMessage: 'Get started',\r\n          })}\r\n        </Button>\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'utils';\r\nimport { ActionCreator } from 'redux';\r\n\r\nexport enum BoardActionTypes {\r\n  CREATE_BOARD = 'CREATE_BOARD',\r\n  DELETE_BOARD = 'DELETE_BOARD',\r\n  CHANGE_BOARD = 'CHANGE_BOARD',\r\n  MOVE_LIST = 'MOVE_LIST',\r\n}\r\nconst {\r\n  CREATE_BOARD,\r\n  CHANGE_BOARD,\r\n  DELETE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport interface CreateBoardAction {\r\n  type: typeof CREATE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\nexport interface DeleteBoardAction {\r\n  type: typeof DELETE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    listsIds: string[];\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteBoardThunk = ActionCreator<\r\n  ThunkAction<DeleteBoardAction, AppState, void, DeleteBoardAction>\r\n>;\r\n\r\nexport interface ChangeBoardAction {\r\n  type: typeof CHANGE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveListAction {\r\n  type: typeof MOVE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type BoardActions =\r\n  | CreateBoardAction\r\n  | DeleteBoardAction\r\n  | ChangeBoardAction\r\n  | MoveListAction;\r\n\r\nexport interface BoardData {\r\n  id: string;\r\n  title: string;\r\n  lists: string[];\r\n}\r\n\r\nexport interface BoardsState {\r\n  byId: {\r\n    [prop: string]: BoardData;\r\n  };\r\n  allIds: string[];\r\n}\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  ChangeListAction,\r\n  DeleteListThunk,\r\n  MoveCardAction,\r\n} from './types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport const createList = (\r\n  boardId: string,\r\n  title: string\r\n): CreateListAction => ({\r\n  type: CREATE_LIST,\r\n  payload: { boardId, listId: v4(), title },\r\n});\r\n\r\nexport const deleteList: DeleteListThunk = (\r\n  boardId: string,\r\n  listId: string\r\n) => (dispatch, getState) => {\r\n  const { lists } = getState();\r\n  const cardsIds = lists[listId].cards;\r\n\r\n  return dispatch({\r\n    type: DELETE_LIST,\r\n    payload: {\r\n      boardId,\r\n      listId,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeList = (\r\n  listId: string,\r\n  title: string\r\n): ChangeListAction => ({\r\n  type: CHANGE_LIST,\r\n  payload: { listId, title },\r\n});\r\n\r\nexport const moveCard = (\r\n  fromListId: string,\r\n  toListId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveCardAction => ({\r\n  type: MOVE_CARD,\r\n  payload: {\r\n    fromListId,\r\n    toListId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","export enum CardActionTypes {\r\n  CREATE_CARD = 'CREATE_CARD',\r\n  DELETE_CARD = 'DELETE_CARD',\r\n  CHANGE_CARD = 'CHANGE_CARD',\r\n}\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport interface CreateCardAction {\r\n  type: typeof CREATE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteCardAction {\r\n  type: typeof DELETE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n  };\r\n}\r\n\r\nexport interface ChangeCardAction {\r\n  type: typeof CHANGE_CARD;\r\n  payload: {\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport type CardActions =\r\n  | CreateCardAction\r\n  | DeleteCardAction\r\n  | ChangeCardAction;\r\n\r\nexport interface CardData {\r\n  id: string;\r\n  content: string;\r\n}\r\n\r\nexport interface CardsState {\r\n  [prop: string]: CardData;\r\n}\r\n","import {\r\n  BoardActionTypes,\r\n  CreateBoardAction,\r\n  ChangeBoardAction,\r\n  DeleteBoardThunk,\r\n  MoveListAction,\r\n} from './types';\r\nimport { v4 } from 'uuid';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport const createBoard = (title: string): CreateBoardAction => ({\r\n  type: CREATE_BOARD,\r\n  payload: {\r\n    boardId: v4(),\r\n    title,\r\n  },\r\n});\r\n\r\nexport const deleteBoard: DeleteBoardThunk = (boardId: string) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { boards, lists } = getState();\r\n  const listsIds = boards.byId[boardId].lists;\r\n  const cardsIds = listsIds.map(id => lists[id].cards).flat();\r\n\r\n  return dispatch({\r\n    type: DELETE_BOARD,\r\n    payload: {\r\n      boardId,\r\n      listsIds,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeBoard = (\r\n  boardId: string,\r\n  title: string\r\n): ChangeBoardAction => ({\r\n  type: CHANGE_BOARD,\r\n  payload: { boardId, title },\r\n});\r\n\r\nexport const moveList = (\r\n  boardId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveListAction => ({\r\n  type: MOVE_LIST,\r\n  payload: {\r\n    boardId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport const createCard = (\r\n  listId: string,\r\n  content: string\r\n): CreateCardAction => ({\r\n  type: CREATE_CARD,\r\n  payload: { listId, cardId: v4(), content },\r\n});\r\n\r\nexport const deleteCard = (\r\n  listId: string,\r\n  cardId: string\r\n): DeleteCardAction => ({\r\n  type: DELETE_CARD,\r\n  payload: { listId, cardId },\r\n});\r\n\r\nexport const changeCard = (\r\n  cardId: string,\r\n  content: string\r\n): ChangeCardAction => ({\r\n  type: CHANGE_CARD,\r\n  payload: { cardId, content },\r\n});\r\n","import React, { FC, ReactElement, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { FieldEditor } from 'shared';\r\nimport { createPortal } from 'react-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { AppState, useToggle } from 'utils';\r\n\r\nexport interface CardProps {\r\n  index: number;\r\n  id: string;\r\n  onDelete: (id: string) => any;\r\n  onEdit: (id: string, newContent: string) => any;\r\n}\r\n\r\nconst optionalPortal = (style: any, element: ReactElement): ReactElement => {\r\n  if (style.position !== 'fixed') return element;\r\n  return createPortal(element, document.getElementById('draggable')!);\r\n};\r\n\r\nconst Card: FC<CardProps> = ({ index, id, onDelete, onEdit }) => {\r\n  const intl = useIntl();\r\n\r\n  const content = useSelector<AppState, string>(\r\n    ({ cards }) => cards[id].content\r\n  );\r\n\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newContent: string) => onEdit(id, newContent);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, toggleShouldDrag] = useToggle(true);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided =>\r\n        optionalPortal(\r\n          provided.draggableProps.style,\r\n          <div\r\n            className=\"card\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <FieldEditor\r\n              fieldName={intl.formatMessage({\r\n                id: 'cards/content',\r\n                defaultMessage: 'Content',\r\n              })}\r\n              value={content}\r\n              onSubmit={handleSubmit}\r\n              onDelete={handleDelete}\r\n              onEditToggle={toggleShouldDrag}\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(Card);\r\n","import React, { FC, memo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewCardProps {\r\n  onCreate: (content: string) => any;\r\n}\r\n\r\nconst NewCard: FC<NewCardProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div className=\"card new-card\">\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'cards/content',\r\n          defaultMessage: 'Content',\r\n        })}\r\n        displayOnViewMode={intl.formatMessage({\r\n          id: 'cards/new-card',\r\n          defaultMessage: 'New card',\r\n        })}\r\n        titles={{\r\n          edit: intl.formatMessage({ id: 'create', defaultMessage: 'Create' }),\r\n        }}\r\n        exitOnSubmit={false}\r\n        onSubmit={onCreate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewCard);\r\n","import React, { FC, useCallback, memo } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createCard, deleteCard, changeCard } from '../actions';\r\nimport Card from './Card';\r\nimport NewCard from './NewCard';\r\nimport { AppState } from 'utils';\r\n\r\nexport interface ListOfCardsProps {\r\n  listId: string;\r\n}\r\n\r\nconst ListOfCards: FC<ListOfCardsProps> = ({ listId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const cardsIds = useSelector<AppState, string[]>(\r\n    ({ lists }) => lists[listId]?.cards || []\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (content: string) => dispatch(createCard(listId, content)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (cardId: string) => dispatch(deleteCard(listId, cardId)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (cardId: string, content: string) => dispatch(changeCard(cardId, content)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Droppable droppableId={listId} type=\"card\">\r\n        {provided => (\r\n          <ul\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className=\"list-of-cards\"\r\n          >\r\n            {cardsIds.map((id, index) => (\r\n              <li key={id}>\r\n                <Card\r\n                  index={index}\r\n                  id={id}\r\n                  onDelete={onDelete}\r\n                  onEdit={onEdit}\r\n                />\r\n              </li>\r\n            ))}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n      <NewCard onCreate={onCreate} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfCards);\r\n","import React, { FC, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { FieldEditor } from 'shared';\r\nimport ListOfCard from 'cards';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState, useToggle } from 'utils';\r\nimport { useIntl } from 'react-intl';\r\n\r\nexport interface ListProps {\r\n  index: number;\r\n  id: string;\r\n  onEdit: (listId: string, newTitle: string) => any;\r\n  onDelete: (listId: string) => any;\r\n}\r\n\r\nconst List: FC<ListProps> = ({ index, id, onEdit, onDelete }) => {\r\n  const intl = useIntl();\r\n\r\n  const title = useSelector<AppState, string>(({ lists }) => lists[id].title);\r\n\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newTitle: string) => onEdit(id, newTitle);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, toggleShouldDrag] = useToggle(true);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided => (\r\n        <div\r\n          className=\"list\"\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <header>\r\n            <FieldEditor\r\n              fieldName={intl.formatMessage({\r\n                id: 'lists/title',\r\n                defaultMessage: 'Title',\r\n              })}\r\n              value={title}\r\n              onDelete={handleDelete}\r\n              onSubmit={handleSubmit}\r\n              onEditToggle={toggleShouldDrag}\r\n            />\r\n          </header>\r\n          <ListOfCard listId={id} />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(List);\r\n","import React, { FC } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewListProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewList: FC<NewListProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div className=\"list new-list\">\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'lists/title',\r\n          defaultMessage: 'Title',\r\n        })}\r\n        displayOnViewMode={intl.formatMessage({\r\n          id: 'lists/new-list',\r\n          defaultMessage: 'Create card',\r\n        })}\r\n        titles={{\r\n          edit: intl.formatMessage({ id: 'create', defaultMessage: 'Create' }),\r\n        }}\r\n        exitOnSubmit={false}\r\n        onSubmit={onCreate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewList;\r\n","import React, { FC, memo, useCallback } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from 'utils';\r\nimport { createList, deleteList, changeList, moveCard } from '../actions';\r\nimport { moveList } from 'boards/actions';\r\nimport List from './List';\r\nimport NewList from './NewList';\r\n\r\nexport interface ListOfListsProps {\r\n  boardId: string;\r\n}\r\n\r\nconst ListOfLists: FC<ListOfListsProps> = ({ boardId }) => {\r\n  const lists = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.byId[boardId]?.lists || []\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createList(boardId, title)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (listId: string) => dispatch(deleteList(boardId, listId)),\r\n    [boardId, dispatch]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (listId: string, title: string) => dispatch(changeList(listId, title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onListMove = useCallback(\r\n    (fromIndex: number, toIndex: number) =>\r\n      dispatch(moveList(boardId, fromIndex, toIndex)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onCardMove = useCallback(\r\n    (\r\n      fromListId: string,\r\n      toListId: string,\r\n      fromIndex: number,\r\n      toIndex: number\r\n    ) => dispatch(moveCard(fromListId, toListId, fromIndex, toIndex)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, type } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    if (type === 'card') {\r\n      const { droppableId: fromListId, index: fromIndex } = source;\r\n      const { droppableId: toListId, index: toIndex } = destination;\r\n\r\n      if (fromListId === toListId && fromIndex === toIndex) {\r\n        return;\r\n      }\r\n\r\n      onCardMove(fromListId, toListId, fromIndex, toIndex);\r\n    } else if (type === 'list') {\r\n      if (source.index === destination.index) return;\r\n\r\n      onListMove(source.index, destination.index);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"list-of-lists\">\r\n        <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"list\">\r\n          {provided => (\r\n            <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n              {lists.map((id, index) => (\r\n                <li key={id}>\r\n                  <List\r\n                    index={index}\r\n                    id={id}\r\n                    onEdit={onEdit}\r\n                    onDelete={onDelete}\r\n                  />\r\n                </li>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n        <NewList onCreate={onCreate} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfLists);\r\n","import React, { FC } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport { Button } from 'shared';\r\nimport './styles.scss';\r\n\r\nexport interface NotFoundPageProps {\r\n  message?: string;\r\n}\r\n\r\nconst NotFoundPage: FC<NotFoundPageProps> = ({ message }) => {\r\n  const history = useHistory();\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <main className=\"not-found-page\">\r\n      <div className=\"message\">\r\n        <span className=\"error-code\">404</span>\r\n        <p>{message}</p>\r\n        <Button onClick={history.goBack}>\r\n          {intl.formatMessage({\r\n            id: 'app/go-back',\r\n            defaultMessage: 'Go back',\r\n          })}\r\n        </Button>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default NotFoundPage;\r\n","import React, { FC, WheelEvent } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR, AppState } from 'utils';\r\nimport './styles.scss';\r\nimport ListOfLists from 'lists';\r\nimport NotFoundPage from 'app/NotFoundPage/NotFoundPage';\r\n\r\nexport interface BoardPageProps extends RouteComponentProps<{ id: string }> {}\r\n\r\nconst BoardPage: FC<BoardPageProps> = ({ match }) => {\r\n  const intl = useIntl();\r\n\r\n  const boardId = match.params.id;\r\n  const boardExist = useSelector<AppState, boolean>(\r\n    state => !!state.boards.byId[boardId]\r\n  );\r\n\r\n  if (boardExist) {\r\n    const onWheel = ({\r\n      target,\r\n      currentTarget,\r\n      deltaY,\r\n    }: WheelEvent<HTMLDivElement>) => {\r\n      if (window.innerHeight <= 600) return;\r\n      if ((target as HTMLElement)?.closest('.list')) return;\r\n      currentTarget.scrollTo({\r\n        left:\r\n          currentTarget.scrollLeft + deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n      });\r\n    };\r\n\r\n    return (\r\n      <main className=\"board-page\" onWheel={onWheel}>\r\n        <ListOfLists boardId={boardId} />\r\n      </main>\r\n    );\r\n  } else\r\n    return (\r\n      <NotFoundPage\r\n        message={intl.formatMessage({\r\n          id: 'app/board404',\r\n          defaultMessage: \"Such board doesn't exist\",\r\n        })}\r\n      />\r\n    );\r\n};\r\n\r\nexport default BoardPage;\r\n","import React, { FC, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FieldEditor } from 'shared';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState, preventDefault, useToggle } from 'utils';\r\nimport { useIntl } from 'react-intl';\r\n\r\nexport interface BoardLinkProps {\r\n  id: string;\r\n  onEdit: (id: string, newTitle: string) => any;\r\n  onDelete: (id: string) => any;\r\n}\r\n\r\nconst BoardLink: FC<BoardLinkProps> = ({ id, onEdit, onDelete }) => {\r\n  const intl = useIntl();\r\n\r\n  const title = useSelector<AppState, string>(\r\n    ({ boards }) => boards.byId[id].title\r\n  );\r\n\r\n  const [editMode, toggleEditMode] = useToggle(false);\r\n\r\n  const FieldEditProps = {\r\n    fieldName: intl.formatMessage({\r\n      id: 'boards/title',\r\n      defaultMessage: 'Title',\r\n    }),\r\n    value: title,\r\n    iconToggle: true,\r\n    onEditToggle: toggleEditMode,\r\n    onSubmit: (newTitle: string) => onEdit(id, newTitle),\r\n    onDelete: () => onDelete(id),\r\n  };\r\n\r\n  return (\r\n    <NavLink\r\n      to={`/boards/${id}`}\r\n      className=\"board-link\"\r\n      onClick={editMode ? preventDefault : undefined}\r\n    >\r\n      <FieldEditor {...FieldEditProps} />\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default memo(BoardLink);\r\n","import React, { FC, memo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewBoardProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewBoard: FC<NewBoardProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board-link new-board\">\r\n        <FieldEditor\r\n          fieldName={intl.formatMessage({\r\n            id: 'boards/title',\r\n            defaultMessage: 'Title',\r\n          })}\r\n          displayOnViewMode={intl.formatMessage({\r\n            id: 'boards/new-board',\r\n            defaultMessage: 'Create board',\r\n          })}\r\n          titles={{\r\n            edit: intl.formatMessage({\r\n              id: 'create',\r\n              defaultMessage: 'Create',\r\n            }),\r\n          }}\r\n          exitOnSubmit={false}\r\n          onSubmit={onCreate}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewBoard);\r\n","import React, { FC, WheelEvent, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR, AppState } from 'utils';\r\nimport BoardLink from './BoardLink';\r\nimport NewBoard from './NewBoard';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createBoard, deleteBoard, changeBoard } from 'boards/actions';\r\n\r\nconst BoardsNavigation: FC = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const boardsIds = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.allIds\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createBoard(title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (boardId: string) => {\r\n      if (history.location.pathname.includes(boardId)) history.push('/boards/');\r\n      dispatch(deleteBoard(boardId));\r\n    },\r\n    [dispatch, history]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (boardId: string, newTitle: string) => {\r\n      dispatch(changeBoard(boardId, newTitle));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onWheel = ({\r\n    target,\r\n    currentTarget,\r\n    deltaY,\r\n  }: WheelEvent<HTMLDivElement>) => {\r\n    if ((target as HTMLElement)?.closest('.field-editor.edit')) return;\r\n    currentTarget.scrollTo({\r\n      left:\r\n        currentTarget.scrollLeft + deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <nav className=\"boards-navigation\" onWheel={onWheel}>\r\n      <ul>\r\n        {boardsIds.map(id => (\r\n          <li key={id}>\r\n            <BoardLink id={id} onDelete={onDelete} onEdit={onEdit} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <NewBoard onCreate={onCreate} />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default BoardsNavigation;\r\n","import React, { FC } from 'react';\nimport { IntlProvider, useIntl } from 'react-intl';\nimport { Switch, Route } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport 'normalize.css';\nimport './App.scss';\nimport { AppState } from 'utils';\nimport translations from './localization/data';\nimport Header from './Header/Header';\nimport HomePage from './HomePage/HomePage';\nimport BoardPage from './BoardPage/BoardPage';\nimport BoardsNavigation from 'boards';\nimport NotFoundPage from './NotFoundPage/NotFoundPage';\n\nconst App: FC = () => {\n  const locale = useSelector<AppState, string>(\n    ({ locale }) => locale.languageCode\n  );\n\n  return (\n    <IntlProvider locale={locale} messages={translations[locale].translation}>\n      <Header />\n      <Switch>\n        <Route path=\"/\" exact={true} component={HomePage} />\n        <Route\n          path=\"/boards\"\n          render={() => (\n            <>\n              <BoardsNavigation />\n              <Route path=\"/boards/:id\" component={BoardPage} />\n            </>\n          )}\n        />\n        <Route path=\"*\" component={PageNotFound} />\n      </Switch>\n    </IntlProvider>\n  );\n};\n\nconst PageNotFound: FC = () => {\n  const intl = useIntl();\n\n  return (\n    <NotFoundPage\n      message={intl.formatMessage({\n        id: 'app/page404',\n        defaultMessage: \"Such page doesn't exist\",\n      })}\n    />\n  );\n};\n\nexport default App;\n","import throttle from 'lodash/throttle';\r\nimport store from './store';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (!serializedState) return;\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const saveState = () => {\r\n  try {\r\n    const serializedState = JSON.stringify(store.getState());\r\n    localStorage.setItem('state', serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const watchState = throttle(() => {\r\n  store.subscribe(saveState);\r\n}, 1000);\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  LocaleActionTypes,\r\n  LocaleState,\r\n  LocaleActions,\r\n  SetLanguageAction,\r\n} from './types';\r\nimport translations from './data';\r\n\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nconst preferredLanguage = navigator.language?.slice(0, 2);\r\nlet language: string = 'en';\r\nif (preferredLanguage in translations) language = preferredLanguage;\r\n\r\nconst initialState: LocaleState = {\r\n  languageCode: language,\r\n  languageName: translations[language].name,\r\n};\r\n\r\nconst localeReducer: Reducer<LocaleState, LocaleActions> = (\r\n  state = initialState,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case SET_LANGUAGE: {\r\n      return {\r\n        ...state,\r\n        ...(payload as SetLanguageAction['payload']),\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default localeReducer;\r\n","import {\r\n  BoardActionTypes,\r\n  BoardsState,\r\n  BoardActions,\r\n  CreateBoardAction,\r\n  DeleteBoardAction,\r\n  ChangeBoardAction,\r\n  MoveListAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n} from 'lists/types';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\nconst { CREATE_LIST, DELETE_LIST } = ListActionTypes;\r\n\r\nconst initialState: BoardsState = {\r\n  byId: {},\r\n  allIds: [],\r\n};\r\n\r\nconst boardReducer: Reducer<\r\n  BoardsState,\r\n  BoardActions | CreateListAction | DeleteListAction\r\n> = (state = initialState, { type, payload }): BoardsState => {\r\n  switch (type) {\r\n    case CREATE_BOARD: {\r\n      const { boardId, title } = payload as CreateBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { id: boardId, title, lists: [] },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds: [...state.allIds, boardId],\r\n      };\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { boardId } = payload as DeleteBoardAction['payload'];\r\n\r\n      const { [boardId]: ignore, ...byId } = state.byId;\r\n      const allIds = state.allIds.filter(id => id !== boardId);\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds,\r\n      };\r\n    }\r\n\r\n    case CHANGE_BOARD: {\r\n      const { boardId, title } = payload as ChangeBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { ...state.byId[boardId], title },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case MOVE_LIST: {\r\n      const {\r\n        boardId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveListAction['payload'];\r\n\r\n      const byId = { ...state.byId };\r\n      const board = { ...byId[boardId] };\r\n      const lists = [...board.lists];\r\n\r\n      const list = lists.splice(fromIndex, 1);\r\n      lists.splice(toIndex, 0, ...list);\r\n\r\n      board.lists = lists;\r\n      byId[boardId] = board;\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case CREATE_LIST: {\r\n      const { boardId, listId } = payload as CreateListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n      board.lists = [...board.lists, listId];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const {\r\n        boardId,\r\n        listId: targetListId,\r\n      } = payload as DeleteListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n\r\n      board.lists = board.lists.filter(listId => listId !== targetListId);\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default boardReducer;\r\n","import {\r\n  ListActionTypes,\r\n  ListsState,\r\n  ListActions,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n  ChangeListAction,\r\n  MoveCardAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n} from 'cards/types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\nconst { CREATE_CARD, DELETE_CARD } = CardActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: ListsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  ListsState,\r\n  ListActions | CreateCardAction | DeleteCardAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): ListsState => {\r\n  switch (type) {\r\n    case CREATE_LIST: {\r\n      const { listId, title } = payload as CreateListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { id: listId, title, cards: [] },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { listId } = payload as DeleteListAction['payload'];\r\n\r\n      const { [listId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_LIST: {\r\n      const { listId, title } = payload as ChangeListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], title },\r\n      };\r\n    }\r\n\r\n    case CREATE_CARD: {\r\n      const { listId, cardId } = payload as CreateCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = [...list.cards, cardId];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { listId, cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = list.cards.filter(id => id !== cardId);\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case MOVE_CARD: {\r\n      const {\r\n        fromListId,\r\n        toListId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveCardAction['payload'];\r\n\r\n      const newState = { ...state };\r\n\r\n      const fromList = { ...newState[fromListId] };\r\n      fromList.cards = [...fromList.cards];\r\n      const card = fromList.cards.splice(fromIndex, 1);\r\n      newState[fromListId] = fromList;\r\n\r\n      const toList = { ...newState[toListId] };\r\n      toList.cards = [...toList.cards];\r\n      toList.cards.splice(toIndex, 0, ...card);\r\n      newState[toListId] = toList;\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { listsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: ListsState = {};\r\n      for (const prop in state) {\r\n        if (state.hasOwnProperty(prop) && !listsIds.includes(prop)) {\r\n          newState[prop] = state[prop];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  CardActionTypes,\r\n  CardsState,\r\n  CardActions,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nimport { ListActionTypes, DeleteListAction } from 'lists/types';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\nconst { DELETE_LIST } = ListActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: CardsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  CardsState,\r\n  CardActions | DeleteListAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): CardsState => {\r\n  switch (type) {\r\n    case CREATE_CARD: {\r\n      const { cardId, content } = payload as CreateCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { id: cardId, content },\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const { [cardId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_CARD: {\r\n      const { cardId, content } = payload as ChangeCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { ...state[cardId], content },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { cardsIds } = payload as DeleteListAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { cardsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { combineReducers } from 'redux';\r\nimport localeReducer from './localization/reducer';\r\nimport boardReducer from 'boards/reducer';\r\nimport listReducer from 'lists/reducer';\r\nimport cardReducer from 'cards/reducer';\r\n\r\nexport default combineReducers({\r\n  locale: localeReducer,\r\n  boards: boardReducer,\r\n  lists: listReducer,\r\n  cards: cardReducer,\r\n});\r\n","import { Store, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { AppState, AllActions } from 'utils';\r\nimport { loadState } from './localStorage';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = [ReduxThunk];\r\n\r\nconst store: Store<AppState, AllActions> = createStore(\r\n  rootReducer,\r\n  loadState(),\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from 'app/App';\nimport store from 'app/store';\nimport { watchState } from 'app/localStorage';\n\nwatchState();\n\nReactDOM.render(\n  <StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}