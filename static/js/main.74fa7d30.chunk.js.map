{"version":3,"sources":["utils/index.ts","utils/lib.ts","utils/constants.ts","utils/hooks.ts","localization/types.ts","localization/data/index.ts","themes/types.ts","localization/actions.ts","app/Header/Menu/SelectLanguage.tsx","lists/types.ts","themes/actions.ts","shared/Button/Button.tsx","shared/TextArea/TextArea.tsx","shared/FieldEditor/FieldEditor.tsx","shared/Toggle/Toggle.tsx","app/Header/Menu/ThemeToggle.tsx","app/Header/Menu/Menu.tsx","app/Header/Header.tsx","app/PhotoSignature/PhotoSignature.tsx","app/views/NotFoundPage/NotFoundPage.tsx","app/views/HomePage/HomePage.tsx","boards/types.ts","lists/actions.ts","cards/types.ts","boards/actions.ts","cards/actions.ts","cards/components/Card.tsx","cards/components/NewCard.tsx","cards/components/ListOfCards.tsx","lists/components/List.tsx","lists/components/NewList.tsx","lists/components/ListOfLists.tsx","app/views/BoardPage/BoardPage.tsx","boards/components/BoardLink.tsx","boards/components/NewBoard.tsx","boards/components/BoardsNavigation.tsx","app/App.tsx","app/localStorage.ts","localization/reducer.ts","themes/reducer.ts","boards/reducer.ts","lists/reducer.ts","cards/reducer.ts","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["preventDefault","e","closestByReference","element","ref","currentElement","parentElement","parentNode","nodeType","removeLineBreaks","value","replace","HORIZONTAL_SCROLLING_SPEED_FACTOR","useStateWithCallback","initialState","callback","useState","state","setState","useSwitchWithCallback","useToggle","useCallbackOnExternalAction","condition","useEffect","handler","target","document","addEventListener","removeEventListener","LocaleActionTypes","translations","en","name","translation","ru","SET_LANGUAGE","ThemeActionTypes","SelectLanguage","intl","useIntl","dispatch","useDispatch","language","useSelector","locale","languageCode","type","payload","code","languageName","currentLanguage","setCurrentLanguage","className","formatMessage","id","defaultMessage","onChange","Object","entries","map","data","key","TOGGLE_THEME","ListActionTypes","Button","forwardRef","derivedClassName","styleType","attributes","TextArea","labelValue","isInvalid","containerClassName","hideLabel","setHideLabel","textAreaProps","spellCheck","TextareaAutosize","FieldEditor","fieldName","displayOnViewMode","titles","initialEditMode","onEditToggle","iconToggle","exitOnSubmit","onSubmit","onDelete","textareaClassName","textareaContainerClassName","textAreaRef","useRef","formRef","editMode","enterEditMode","exitEditMode","currentValue","setCurrentValue","trim","handleSubmit","trimmedCurrentValue","current","focus","editTitle","edit","submitTitle","submit","cancelTitle","cancel","deleteTitle","delete","title","undefined","rowsMax","disabled","required","onKeyDown","onClick","fontSize","Toggle","ThemeToggle","currentTheme","theme","checked","Menu","menuRef","expand","toggleExpand","Header","to","exact","PhotoSignature","themeData","href","bgAuthorLink","rel","bgAuthor","bgSourceLink","bgSource","NotFoundPage","message","history","useHistory","goBack","HomePage","tabIndex","CREATE_LIST","DELETE_LIST","CHANGE_LIST","MOVE_CARD","BoardActionTypes","CREATE_BOARD","CHANGE_BOARD","DELETE_BOARD","MOVE_LIST","CardActionTypes","CREATE_CARD","DELETE_CARD","CHANGE_CARD","memo","index","onEdit","content","cards","handleDelete","newContent","shouldDrag","toggleShouldDrag","draggableId","disableInteractiveElementBlocking","provided","style","draggableProps","dragHandleProps","innerRef","position","createPortal","getElementById","onCreate","toggleListDrag","listId","cardsIds","lists","useCallback","cardId","v4","createCard","deleteCard","changeCard","droppableId","droppableProps","placeholder","newTitle","boardId","boards","byId","createList","getState","deleteList","changeList","onListMove","fromIndex","toIndex","moveList","onCardMove","fromListId","toListId","moveCard","onDragEnd","result","destination","source","direction","BoardPage","match","params","onWheel","currentTarget","deltaY","window","innerHeight","closest","scrollTo","left","scrollLeft","toggleEditMode","BoardsNavigation","boardsIds","allIds","createBoard","location","pathname","includes","push","listsIds","flat","deleteBoard","changeBoard","PageNotFound","App","messages","path","component","render","saveState","serializedState","JSON","stringify","store","localStorage","setItem","err","watchState","throttle","subscribe","preferredLanguage","navigator","slice","localeReducer","themesData","light","themeReducer","newTheme","boardReducer","filter","board","list","splice","targetListId","listReducer","rest","newState","fromList","card","toList","prop","hasOwnProperty","combineReducers","cardReducer","middleware","ReduxThunk","createStore","rootReducer","getItem","parse","loadState","composeWithDevTools","applyMiddleware","ReactDOM","basename","process"],"mappings":"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","file":"static/js/main.74fa7d30.chunk.js","sourcesContent":["export * from './types';\r\nexport * from './constants';\r\nexport * from './lib';\r\nexport * from './hooks';\r\n","import { SyntheticEvent } from 'react';\r\n\r\nexport const preventDefault = (e: Event | SyntheticEvent) => e.preventDefault();\r\n\r\nexport const cloneDeep = <T extends {} | []>(structure: T): T =>\r\n  JSON.parse(JSON.stringify(structure));\r\n\r\nexport const closestByReference = (element: HTMLElement, ref: HTMLElement) => {\r\n  let currentElement: HTMLElement | Node | null = element;\r\n\r\n  do {\r\n    if (currentElement === ref) return currentElement;\r\n    currentElement = currentElement.parentElement || currentElement.parentNode;\r\n  } while (currentElement !== null && currentElement.nodeType === 1);\r\n\r\n  return null;\r\n};\r\n\r\nexport const removeLineBreaks = (value: string) =>\r\n  value.replace(/\\r\\n|\\r|\\n/gm, ' ');\r\n","export const HORIZONTAL_SCROLLING_SPEED_FACTOR = 0.75;\r\n","import { useState, useEffect } from 'react';\r\nimport { closestByReference } from './lib';\r\n\r\nexport const useStateWithCallback = <S>(\r\n  initialState: S,\r\n  callback?: (state: S) => any\r\n) => {\r\n  const [state, setState] = useState(initialState);\r\n  return [\r\n    state,\r\n    value => {\r\n      if (callback) callback(value);\r\n      setState(value);\r\n    },\r\n  ] as [S, (value: S) => void];\r\n};\r\n\r\nexport const useSwitchWithCallback = (\r\n  initialState: boolean,\r\n  callback?: (state: boolean) => any\r\n) => {\r\n  const [state, setState] = useStateWithCallback(initialState, callback);\r\n  const enable = () => setState(true);\r\n  const disable = () => setState(false);\r\n  return [state, enable, disable] as [boolean, () => void, () => void];\r\n};\r\n\r\nexport const useToggle = (initialState: boolean) => {\r\n  const [state, setState] = useState(initialState);\r\n  const toggleState = () => setState(!state);\r\n  return [state, toggleState] as [boolean, () => void];\r\n};\r\n\r\nexport const useCallbackOnExternalAction = (\r\n  element: HTMLElement | null,\r\n  callback: () => any,\r\n  condition?: boolean\r\n) => {\r\n  useEffect(() => {\r\n    if (!condition || !element) return;\r\n\r\n    const handler = ({ target }: Event) => {\r\n      if (!closestByReference(target as HTMLElement, element)) callback();\r\n    };\r\n\r\n    document.addEventListener('click', handler);\r\n    document.addEventListener('focusin', handler);\r\n    return () => {\r\n      document.removeEventListener('click', handler);\r\n      document.removeEventListener('focusin', handler);\r\n    };\r\n  }, [element, callback, condition]);\r\n};\r\n","import translations from './data';\r\n\r\nexport type AvailableLanguages = keyof typeof translations;\r\n\r\nexport type EnTranslationId = keyof typeof translations['en']['translation'];\r\n\r\nexport enum LocaleActionTypes {\r\n  SET_LANGUAGE = 'SET_LANGUAGE',\r\n}\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nexport interface SetLanguageAction {\r\n  type: typeof SET_LANGUAGE;\r\n  payload: {\r\n    languageCode: string;\r\n    languageName: string;\r\n  };\r\n}\r\n\r\nexport type LocaleActions = SetLanguageAction;\r\n\r\nexport interface LocaleState {\r\n  languageCode: string;\r\n  languageName: string;\r\n}\r\n","import englishTranslation from './en.json';\r\nimport russianTranslation from './ru.json';\r\n\r\ninterface Translations {\r\n  [prop: string]: {\r\n    name: string;\r\n    translation: {\r\n      [prop: string]: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst translations: Translations = {\r\n  en: {\r\n    name: 'english',\r\n    translation: englishTranslation,\r\n  },\r\n  ru: {\r\n    name: 'русский',\r\n    translation: russianTranslation,\r\n  },\r\n};\r\n\r\nexport default translations;\r\n","import themesData from './themesData.json';\r\n\r\nexport enum ThemeActionTypes {\r\n  TOGGLE_THEME = 'TOGGLE_THEME',\r\n}\r\n\r\nconst { TOGGLE_THEME } = ThemeActionTypes;\r\n\r\nexport interface ToggleThemeAction {\r\n  type: typeof TOGGLE_THEME;\r\n}\r\n\r\nexport type ThemeActions = ToggleThemeAction;\r\n\r\nexport interface ThemeState {\r\n  theme: keyof typeof themesData;\r\n  data: {\r\n    bgAuthor: string;\r\n    bgAuthorLink: string;\r\n    bgSource: string;\r\n    bgSourceLink: string;\r\n  };\r\n}\r\n","import translations from './data';\r\nimport { LocaleActionTypes, SetLanguageAction } from './types';\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nexport type SetLanguageActionCreator = (code: string) => SetLanguageAction;\r\n\r\nexport const setLanguage: SetLanguageActionCreator = code => ({\r\n  type: SET_LANGUAGE,\r\n  payload: { languageCode: code, languageName: translations[code].name },\r\n});\r\n","import React, { FC, ChangeEvent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { useStateWithCallback } from 'utils';\r\nimport { AppState } from 'app/types';\r\nimport { setLanguage } from 'localization/actions';\r\nimport translations from 'localization/data';\r\nimport './SelectLanguage.scss';\r\n\r\nconst SelectLanguage: FC = () => {\r\n  const intl = useIntl();\r\n  const dispatch = useDispatch();\r\n  const language = useSelector<AppState, string>(\r\n    state => state.locale.languageCode\r\n  );\r\n  const [currentLanguage, setCurrentLanguage] = useStateWithCallback<string>(\r\n    language,\r\n    state => dispatch(setLanguage(state))\r\n  );\r\n\r\n  const onChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    setCurrentLanguage(e.target.value);\r\n  };\r\n\r\n  // TODO: create custom components\r\n  return (\r\n    <label className=\"change-language\">\r\n      {intl.formatMessage({\r\n        id: 'app/change-language',\r\n        defaultMessage: 'Language',\r\n      })}\r\n      {':'}\r\n      <select\r\n        value={currentLanguage}\r\n        onChange={onChange}\r\n        className=\"language-select\"\r\n      >\r\n        {Object.entries(translations).map(([code, data]) => (\r\n          <option key={code} value={code} className=\"language-option\">\r\n            {data.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default SelectLanguage;\r\n","import { ActionCreator } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'app/types';\r\n\r\nexport enum ListActionTypes {\r\n  CREATE_LIST = 'CREATE_LIST',\r\n  DELETE_LIST = 'DELETE_LIST',\r\n  CHANGE_LIST = 'CHANGE_LIST',\r\n  MOVE_CARD = 'MOVE_CARD',\r\n}\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport interface CreateListAction {\r\n  type: typeof CREATE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteListAction {\r\n  type: typeof DELETE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteListThunk = ActionCreator<\r\n  ThunkAction<DeleteListAction, AppState, void, DeleteListAction>\r\n>;\r\n\r\nexport interface ChangeListAction {\r\n  type: typeof CHANGE_LIST;\r\n  payload: {\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveCardAction {\r\n  type: typeof MOVE_CARD;\r\n  payload: {\r\n    fromListId: string;\r\n    toListId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type ListActions =\r\n  | CreateListAction\r\n  | DeleteListAction\r\n  | ChangeListAction\r\n  | MoveCardAction;\r\n\r\nexport interface ListData {\r\n  id: string;\r\n  title: string;\r\n  cards: string[];\r\n}\r\n\r\nexport interface ListsState {\r\n  [prop: string]: ListData;\r\n}\r\n","import { ThemeActionTypes, ToggleThemeAction } from './types';\r\nconst { TOGGLE_THEME } = ThemeActionTypes;\r\n\r\nexport type ToggleThemeActionCreator = () => ToggleThemeAction;\r\n\r\nexport const toggleTheme: ToggleThemeActionCreator = () => ({\r\n  type: TOGGLE_THEME,\r\n});\r\n","import React, { forwardRef, ComponentProps } from 'react';\r\nimport './Button.scss';\r\n\r\nexport interface ButtonProps extends ComponentProps<'button'> {\r\n  styleType?: 'accent' | 'plain';\r\n}\r\n\r\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\r\n  (\r\n    { className: derivedClassName = '', styleType = '', ...attributes },\r\n    ref\r\n  ) => {\r\n    let className = 'button';\r\n    if (styleType) className += '--' + styleType;\r\n    if (derivedClassName) className += ' ' + derivedClassName;\r\n    return <button className={className} {...attributes} ref={ref} />;\r\n  }\r\n);\r\n","import React, { useState, forwardRef, useEffect } from 'react';\r\nimport { TextareaAutosize, TextareaAutosizeProps } from '@material-ui/core';\r\nimport './TextArea.scss';\r\n\r\nexport interface TextAreaProps extends TextareaAutosizeProps {\r\n  labelValue?: string;\r\n  isInvalid?: boolean;\r\n  containerClassName?: string;\r\n}\r\n\r\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\r\n  (\r\n    {\r\n      labelValue = false,\r\n      isInvalid = false,\r\n      containerClassName = '',\r\n      className: derivedClassName = '',\r\n      value,\r\n      ...attributes\r\n    },\r\n    ref\r\n  ) => {\r\n    const [hideLabel, setHideLabel] = useState(!!value);\r\n\r\n    useEffect(() => {\r\n      setHideLabel(!!value);\r\n    }, [value]);\r\n\r\n    const textAreaProps = {\r\n      className: `textarea__textarea${\r\n        isInvalid ? '--invalid' : ''\r\n      } ${derivedClassName}`,\r\n      spellCheck: false,\r\n      value,\r\n      ...attributes,\r\n      ref,\r\n    };\r\n\r\n    return (\r\n      <div className={`textarea__container ${containerClassName}`}>\r\n        {labelValue ? (\r\n          <label className=\"textarea__label\">\r\n            <span\r\n              className={`textarea__label-value${hideLabel ? '--hide' : ''}`}\r\n            >\r\n              {labelValue}\r\n            </span>\r\n            <TextareaAutosize {...textAreaProps} ref={ref} />\r\n          </label>\r\n        ) : (\r\n          <TextareaAutosize {...textAreaProps} ref={ref} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  ChangeEvent,\r\n  KeyboardEvent,\r\n} from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport {\r\n  preventDefault,\r\n  useCallbackOnExternalAction,\r\n  removeLineBreaks,\r\n  useSwitchWithCallback,\r\n  AnyFunction,\r\n} from 'utils';\r\nimport { Button, TextArea } from 'shared';\r\nimport {\r\n  EditOutlined as EditIcon,\r\n  DeleteOutlineRounded as DeleteIcon,\r\n  DoneRounded as SubmitIcon,\r\n  CloseRounded as CancelIcon,\r\n} from '@material-ui/icons';\r\nimport './FieldEditor.scss';\r\n\r\ninterface Titles {\r\n  submit?: string;\r\n  cancel?: string;\r\n  delete?: string;\r\n  edit?: string;\r\n}\r\n\r\nexport interface FieldEditorProps {\r\n  className?: string;\r\n  fieldName: string;\r\n  value?: string;\r\n  displayOnViewMode?: string;\r\n  titles?: Titles;\r\n  initialEditMode?: boolean;\r\n  onEditToggle?: AnyFunction;\r\n  iconToggle?: boolean;\r\n  exitOnSubmit?: boolean;\r\n  onSubmit: AnyFunction;\r\n  onDelete?: AnyFunction;\r\n  textareaClassName?: string;\r\n  textareaContainerClassName?: string;\r\n}\r\n\r\nexport const FieldEditor: FC<FieldEditorProps> = ({\r\n  className = '',\r\n  fieldName,\r\n  value = '',\r\n  displayOnViewMode,\r\n  titles,\r\n  initialEditMode = false,\r\n  onEditToggle,\r\n  iconToggle = false,\r\n  exitOnSubmit = true,\r\n  onSubmit,\r\n  onDelete,\r\n  textareaClassName,\r\n  textareaContainerClassName,\r\n}) => {\r\n  const intl = useIntl();\r\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n  const formRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [editMode, enterEditMode, exitEditMode] = useSwitchWithCallback(\r\n    initialEditMode,\r\n    onEditToggle\r\n  );\r\n  const [currentValue, setCurrentValue] = useState(value);\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setCurrentValue(removeLineBreaks(e.target.value));\r\n  };\r\n  const isInvalid = !currentValue.trim();\r\n\r\n  const handleSubmit = () => {\r\n    if (isInvalid) return;\r\n\r\n    const trimmedCurrentValue = currentValue.trim();\r\n    if (value !== trimmedCurrentValue) {\r\n      onSubmit(trimmedCurrentValue);\r\n    }\r\n\r\n    if (exitOnSubmit) exitEditMode();\r\n    else setCurrentValue('');\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Escape') exitEditMode();\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editMode) textAreaRef.current?.focus();\r\n  }, [editMode]);\r\n\r\n  useEffect(() => {\r\n    setCurrentValue(value);\r\n  }, [value, editMode]);\r\n\r\n  useCallbackOnExternalAction(formRef.current, exitEditMode, editMode);\r\n\r\n  const editTitle = titles?.edit || intl.formatMessage({ id: 'edit' });\r\n  const submitTitle = titles?.submit || intl.formatMessage({ id: 'submit' });\r\n  const cancelTitle = titles?.cancel || intl.formatMessage({ id: 'cancel' });\r\n  const deleteTitle = titles?.delete || intl.formatMessage({ id: 'delete' });\r\n\r\n  return (\r\n    <div\r\n      className={`field-editor${editMode ? '--edit' : ''} ${className}`}\r\n      ref={formRef}\r\n    >\r\n      <div className=\"field-editor__textarea-container\">\r\n        <TextArea\r\n          containerClassName={textareaContainerClassName}\r\n          className={textareaClassName}\r\n          labelValue={fieldName}\r\n          title={editMode ? fieldName : undefined}\r\n          isInvalid={isInvalid}\r\n          value={\r\n            displayOnViewMode && !editMode ? displayOnViewMode : currentValue\r\n          }\r\n          rowsMax={3}\r\n          disabled={!editMode}\r\n          required={true}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          ref={textAreaRef}\r\n        />\r\n        <div className=\"default-prevention-boundary\" onClick={preventDefault}>\r\n          {!editMode &&\r\n            (iconToggle ? (\r\n              <Button\r\n                styleType=\"plain\"\r\n                className=\"field-editor__button-edit\"\r\n                title={editTitle}\r\n                onClick={enterEditMode}\r\n              >\r\n                <EditIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            ) : (\r\n              // disabled textarea ignores clicks\r\n              <button\r\n                className=\"field-editor__click-overlay\"\r\n                title={editTitle}\r\n                onClick={enterEditMode}\r\n              />\r\n            ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"field-editor__buttons-container\">\r\n        {editMode && (\r\n          <>\r\n            <div>\r\n              <Button\r\n                styleType=\"plain\"\r\n                className=\"field-editor__button-submit\"\r\n                title={submitTitle}\r\n                onClick={handleSubmit}\r\n                disabled={isInvalid}\r\n              >\r\n                <SubmitIcon fontSize=\"inherit\" />\r\n              </Button>\r\n              <Button\r\n                styleType=\"plain\"\r\n                className=\"field-editor__button\"\r\n                title={cancelTitle}\r\n                onClick={exitEditMode}\r\n              >\r\n                <CancelIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            </div>\r\n            {onDelete && (\r\n              <Button\r\n                styleType=\"plain\"\r\n                className=\"field-editor__button\"\r\n                title={deleteTitle}\r\n                onClick={onDelete}\r\n              >\r\n                <DeleteIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, ComponentProps } from 'react';\r\nimport './Toggle.scss';\r\n\r\nexport interface ToggleProps extends ComponentProps<'input'> {}\r\n\r\nexport const Toggle: FC<ToggleProps> = ({ className, ...attributes }) => {\r\n  return (\r\n    <div className=\"toggle\">\r\n      <input\r\n        {...attributes}\r\n        className={`chackbox${className ? ' ' + className : ''}`}\r\n        type=\"checkbox\"\r\n      />\r\n      <div className=\"slider\" />\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from 'app/types';\r\nimport { toggleTheme as toggleThemeActionCreator } from 'themes/actions';\r\nimport { Toggle } from 'shared';\r\nimport './ThemeToggle.scss';\r\n\r\nconst ThemeToggle: FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const currentTheme = useSelector<AppState>(({ theme }) => theme.theme);\r\n  const toggleTheme = () => dispatch(toggleThemeActionCreator());\r\n\r\n  return (\r\n    <label>\r\n      Change theme\r\n      <div className=\"theme-toggle__toggle-container\">\r\n        <Toggle checked={currentTheme === 'dark'} onChange={toggleTheme} />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;\r\n","import React, { FC, useRef } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useToggle, useCallbackOnExternalAction } from 'utils';\r\nimport './Menu.scss';\r\nimport SelectLanguage from './SelectLanguage';\r\nimport ThemeToggle from './ThemeToggle';\r\n\r\nconst Menu: FC = () => {\r\n  const intl = useIntl();\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const [expand, toggleExpand] = useToggle(false);\r\n\r\n  useCallbackOnExternalAction(menuRef.current, toggleExpand, expand);\r\n\r\n  return (\r\n    <div\r\n      className={`site-header__menu${expand ? '--expand' : ''}`}\r\n      ref={menuRef}\r\n    >\r\n      <button onClick={toggleExpand} className=\"site-header__menu-toggle\">\r\n        {expand\r\n          ? intl.formatMessage({\r\n              id: 'app/close-menu',\r\n              defaultMessage: 'Close',\r\n            })\r\n          : intl.formatMessage({ id: 'app/open-menu', defaultMessage: 'Menu' })}\r\n      </button>\r\n      <div className=\"site-header__menu-dropdown\">\r\n        <div className=\"site-header__menu-dropdown-inner\">\r\n          <fieldset className=\"site-header__menu-options-fieldset\">\r\n            <legend className=\"site-header__menu-options-legend\">\r\n              {intl.formatMessage({\r\n                id: 'app/options',\r\n                defaultMessage: 'Options',\r\n              })}\r\n            </legend>\r\n            <div className=\"field\">\r\n              <SelectLanguage />\r\n            </div>\r\n            <div className=\"field\">\r\n              <ThemeToggle />\r\n            </div>\r\n          </fieldset>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport './Header.scss';\r\nimport Menu from './Menu/Menu';\r\n\r\nconst Header: FC = () => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <header className=\"site-header\">\r\n      <div className=\"site-header__placeholder\" />\r\n      <nav className=\"site-header__navigation\">\r\n        <ul className=\"site-header__navigation-list\">\r\n          <li>\r\n            <NavLink\r\n              className=\"site-header__navigation-link\"\r\n              to=\"/\"\r\n              exact={true}\r\n            >\r\n              {intl.formatMessage({ id: 'app/home', defaultMessage: 'Home' })}\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink className=\"site-header__navigation-link\" to=\"/boards\">\r\n              {intl.formatMessage({\r\n                id: 'app/boards',\r\n                defaultMessage: 'Boards',\r\n              })}\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <Menu />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { AppState } from 'app/types';\r\nimport { ThemeState } from 'themes/types';\r\nimport './PhotoSignature.scss';\r\n\r\nexport interface PhotoSignatureProps {}\r\n\r\nconst PhotoSignature: FC<PhotoSignatureProps> = () => {\r\n  const intl = useIntl();\r\n  const themeData = useSelector<AppState, ThemeState['data']>(\r\n    ({ theme }) => theme.data\r\n  );\r\n\r\n  return (\r\n    <span className=\"app__photo-signature\">\r\n      {intl.formatMessage({ id: 'app/photo-by', defaultMessage: 'Photo by' })}{' '}\r\n      <a\r\n        className=\"app__photo-signature-link\"\r\n        href={themeData.bgAuthorLink}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {themeData.bgAuthor}\r\n      </a>{' '}\r\n      {intl.formatMessage({\r\n        id: 'app/downloaded-from',\r\n        defaultMessage: 'from',\r\n      })}{' '}\r\n      <a\r\n        className=\"app__photo-signature-link\"\r\n        href={themeData.bgSourceLink}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {themeData.bgSource}\r\n      </a>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default PhotoSignature;\r\n","import React, { FC } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport { Button } from 'shared';\r\nimport './NotFound.scss';\r\n\r\nexport interface NotFoundPageProps {\r\n  message?: string;\r\n}\r\n\r\nconst NotFoundPage: FC<NotFoundPageProps> = ({ message }) => {\r\n  const history = useHistory();\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <main className=\"not-found-page\">\r\n      <div className=\"not-found-page__message\">\r\n        <span className=\"not-found-page__error-code\">404</span>\r\n        <p>{message}</p>\r\n        <Button onClick={history.goBack}>\r\n          {intl.formatMessage({\r\n            id: 'app/go-back',\r\n            defaultMessage: 'Go back',\r\n          })}\r\n        </Button>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default NotFoundPage;\r\n","import React, { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport { Button } from 'shared';\r\nimport './HomePage.scss';\r\n\r\nconst HomePage: FC = () => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <main className=\"home-page\">\r\n      <h1 className=\"home-page__heading\">Trello clone</h1>\r\n      <Link className=\"home_page__link\" to=\"/boards\" tabIndex={-1}>\r\n        <Button styleType=\"accent\">\r\n          {intl.formatMessage({\r\n            id: 'app/get-started',\r\n            defaultMessage: 'Get started',\r\n          })}\r\n        </Button>\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'app/types';\r\nimport { ActionCreator } from 'redux';\r\n\r\nexport enum BoardActionTypes {\r\n  CREATE_BOARD = 'CREATE_BOARD',\r\n  DELETE_BOARD = 'DELETE_BOARD',\r\n  CHANGE_BOARD = 'CHANGE_BOARD',\r\n  MOVE_LIST = 'MOVE_LIST',\r\n}\r\nconst {\r\n  CREATE_BOARD,\r\n  CHANGE_BOARD,\r\n  DELETE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport interface CreateBoardAction {\r\n  type: typeof CREATE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\nexport interface DeleteBoardAction {\r\n  type: typeof DELETE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    listsIds: string[];\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteBoardThunk = ActionCreator<\r\n  ThunkAction<DeleteBoardAction, AppState, void, DeleteBoardAction>\r\n>;\r\n\r\nexport interface ChangeBoardAction {\r\n  type: typeof CHANGE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveListAction {\r\n  type: typeof MOVE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type BoardActions =\r\n  | CreateBoardAction\r\n  | DeleteBoardAction\r\n  | ChangeBoardAction\r\n  | MoveListAction;\r\n\r\nexport interface BoardData {\r\n  id: string;\r\n  title: string;\r\n  lists: string[];\r\n}\r\n\r\nexport interface BoardsState {\r\n  byId: {\r\n    [prop: string]: BoardData;\r\n  };\r\n  allIds: string[];\r\n}\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  ChangeListAction,\r\n  DeleteListThunk,\r\n  MoveCardAction,\r\n} from './types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport const createList = (\r\n  boardId: string,\r\n  title: string\r\n): CreateListAction => ({\r\n  type: CREATE_LIST,\r\n  payload: { boardId, listId: v4(), title },\r\n});\r\n\r\nexport const deleteList: DeleteListThunk = (\r\n  boardId: string,\r\n  listId: string\r\n) => (dispatch, getState) => {\r\n  const { lists } = getState();\r\n  const cardsIds = lists[listId].cards;\r\n\r\n  return dispatch({\r\n    type: DELETE_LIST,\r\n    payload: {\r\n      boardId,\r\n      listId,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeList = (\r\n  listId: string,\r\n  title: string\r\n): ChangeListAction => ({\r\n  type: CHANGE_LIST,\r\n  payload: { listId, title },\r\n});\r\n\r\nexport const moveCard = (\r\n  fromListId: string,\r\n  toListId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveCardAction => ({\r\n  type: MOVE_CARD,\r\n  payload: {\r\n    fromListId,\r\n    toListId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","export enum CardActionTypes {\r\n  CREATE_CARD = 'CREATE_CARD',\r\n  DELETE_CARD = 'DELETE_CARD',\r\n  CHANGE_CARD = 'CHANGE_CARD',\r\n}\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport interface CreateCardAction {\r\n  type: typeof CREATE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteCardAction {\r\n  type: typeof DELETE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n  };\r\n}\r\n\r\nexport interface ChangeCardAction {\r\n  type: typeof CHANGE_CARD;\r\n  payload: {\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport type CardActions =\r\n  | CreateCardAction\r\n  | DeleteCardAction\r\n  | ChangeCardAction;\r\n\r\nexport interface CardData {\r\n  id: string;\r\n  content: string;\r\n}\r\n\r\nexport interface CardsState {\r\n  [prop: string]: CardData;\r\n}\r\n","import {\r\n  BoardActionTypes,\r\n  CreateBoardAction,\r\n  ChangeBoardAction,\r\n  DeleteBoardThunk,\r\n  MoveListAction,\r\n} from './types';\r\nimport { v4 } from 'uuid';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport const createBoard = (title: string): CreateBoardAction => ({\r\n  type: CREATE_BOARD,\r\n  payload: {\r\n    boardId: v4(),\r\n    title,\r\n  },\r\n});\r\n\r\nexport const deleteBoard: DeleteBoardThunk = (boardId: string) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { boards, lists } = getState();\r\n  const listsIds = boards.byId[boardId].lists;\r\n  const cardsIds = listsIds.map(id => lists[id].cards).flat();\r\n\r\n  return dispatch({\r\n    type: DELETE_BOARD,\r\n    payload: {\r\n      boardId,\r\n      listsIds,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeBoard = (\r\n  boardId: string,\r\n  title: string\r\n): ChangeBoardAction => ({\r\n  type: CHANGE_BOARD,\r\n  payload: { boardId, title },\r\n});\r\n\r\nexport const moveList = (\r\n  boardId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveListAction => ({\r\n  type: MOVE_LIST,\r\n  payload: {\r\n    boardId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport const createCard = (\r\n  listId: string,\r\n  content: string\r\n): CreateCardAction => ({\r\n  type: CREATE_CARD,\r\n  payload: { listId, cardId: v4(), content },\r\n});\r\n\r\nexport const deleteCard = (\r\n  listId: string,\r\n  cardId: string\r\n): DeleteCardAction => ({\r\n  type: DELETE_CARD,\r\n  payload: { listId, cardId },\r\n});\r\n\r\nexport const changeCard = (\r\n  cardId: string,\r\n  content: string\r\n): ChangeCardAction => ({\r\n  type: CHANGE_CARD,\r\n  payload: { cardId, content },\r\n});\r\n","import React, { FC, ReactElement, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { createPortal } from 'react-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { useToggle } from 'utils';\r\nimport { AppState } from 'app/types';\r\nimport { FieldEditor } from 'shared';\r\nimport './Card.scss';\r\n\r\nexport interface CardProps {\r\n  index: number;\r\n  id: string;\r\n  onDelete: (id: string) => any;\r\n  onEdit: (id: string, newContent: string) => any;\r\n}\r\n\r\nconst optionalPortal = (style: any, element: ReactElement): ReactElement => {\r\n  if (style.position !== 'fixed') return element;\r\n  return createPortal(element, document.getElementById('draggable')!);\r\n};\r\n\r\nconst Card: FC<CardProps> = ({ index, id, onDelete, onEdit }) => {\r\n  const intl = useIntl();\r\n\r\n  const content = useSelector<AppState, string>(\r\n    ({ cards }) => cards[id].content\r\n  );\r\n\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newContent: string) => onEdit(id, newContent);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, toggleShouldDrag] = useToggle(true);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided =>\r\n        optionalPortal(\r\n          provided.draggableProps.style,\r\n          <div\r\n            className=\"cards__card\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <FieldEditor\r\n              fieldName={intl.formatMessage({\r\n                id: 'cards/content',\r\n                defaultMessage: 'Content',\r\n              })}\r\n              value={content}\r\n              onSubmit={handleSubmit}\r\n              onDelete={handleDelete}\r\n              onEditToggle={toggleShouldDrag}\r\n              textareaClassName=\"cards__card-textarea\"\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(Card);\r\n","import React, { FC, memo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\nimport './NewCard.scss';\r\n\r\nexport interface NewCardProps {\r\n  onCreate: (content: string) => any;\r\n  toggleListDrag: () => void;\r\n}\r\n\r\nconst NewCard: FC<NewCardProps> = ({ onCreate, toggleListDrag }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div className=\"cards__new-card\">\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'cards/content',\r\n          defaultMessage: 'Content',\r\n        })}\r\n        displayOnViewMode={intl.formatMessage({\r\n          id: 'cards/new-card',\r\n          defaultMessage: 'New card',\r\n        })}\r\n        titles={{\r\n          edit: intl.formatMessage({\r\n            id: 'create',\r\n            defaultMessage: 'Create',\r\n          }),\r\n        }}\r\n        exitOnSubmit={false}\r\n        onSubmit={onCreate}\r\n        onEditToggle={toggleListDrag}\r\n        textareaClassName=\"cards__card-textarea\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewCard);\r\n","import React, { FC, useCallback, memo } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from 'app/types';\r\nimport { createCard, deleteCard, changeCard } from '../actions';\r\nimport './ListOfCards.scss';\r\nimport Card from './Card';\r\nimport NewCard from './NewCard';\r\n\r\nexport interface ListOfCardsProps {\r\n  listId: string;\r\n  toggleListDrag: () => void;\r\n}\r\n\r\nconst ListOfCards: FC<ListOfCardsProps> = ({ listId, toggleListDrag }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const cardsIds = useSelector<AppState, string[]>(\r\n    ({ lists }) => lists[listId]?.cards || []\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (content: string) => dispatch(createCard(listId, content)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (cardId: string) => dispatch(deleteCard(listId, cardId)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (cardId: string, content: string) => dispatch(changeCard(cardId, content)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Droppable droppableId={listId} type=\"card\">\r\n        {provided => (\r\n          <ul\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className=\"cards\"\r\n          >\r\n            {cardsIds.map((id, index) => (\r\n              <li key={id}>\r\n                <Card\r\n                  index={index}\r\n                  id={id}\r\n                  onDelete={onDelete}\r\n                  onEdit={onEdit}\r\n                />\r\n              </li>\r\n            ))}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n      <NewCard onCreate={onCreate} toggleListDrag={toggleListDrag} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfCards);\r\n","import React, { FC, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { useToggle } from 'utils';\r\nimport { AppState } from 'app/types';\r\nimport { FieldEditor } from 'shared';\r\nimport ListOfCard from 'cards';\r\n\r\nimport './List.scss';\r\n\r\nexport interface ListProps {\r\n  index: number;\r\n  id: string;\r\n  onEdit: (listId: string, newTitle: string) => any;\r\n  onDelete: (listId: string) => any;\r\n}\r\n\r\nconst List: FC<ListProps> = ({ index, id, onEdit, onDelete }) => {\r\n  const intl = useIntl();\r\n\r\n  const title = useSelector<AppState, string>(({ lists }) => lists[id].title);\r\n\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newTitle: string) => onEdit(id, newTitle);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, toggleShouldDrag] = useToggle(true);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided => (\r\n        <div\r\n          className=\"lists__list\"\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <header className=\"lists__list-header\">\r\n            <FieldEditor\r\n              fieldName={intl.formatMessage({\r\n                id: 'lists/title',\r\n                defaultMessage: 'Title',\r\n              })}\r\n              value={title}\r\n              onDelete={handleDelete}\r\n              onSubmit={handleSubmit}\r\n              onEditToggle={toggleShouldDrag}\r\n              textareaClassName=\"lists__list-textarea\"\r\n            />\r\n          </header>\r\n          <ListOfCard listId={id} toggleListDrag={toggleShouldDrag} />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(List);\r\n","import React, { FC, memo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\nimport './NewList.scss';\r\n\r\nexport interface NewListProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewList: FC<NewListProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div className=\"lists__new-list\">\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'lists/title',\r\n          defaultMessage: 'Title',\r\n        })}\r\n        displayOnViewMode={intl.formatMessage({\r\n          id: 'lists/new-list',\r\n          defaultMessage: 'Create card',\r\n        })}\r\n        titles={{\r\n          edit: intl.formatMessage({ id: 'create', defaultMessage: 'Create' }),\r\n        }}\r\n        exitOnSubmit={false}\r\n        onSubmit={onCreate}\r\n        textareaClassName=\"lists__list-textarea\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewList);\r\n","import React, { FC, memo, useCallback } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from 'app/types';\r\nimport { createList, deleteList, changeList, moveCard } from '../actions';\r\nimport { moveList } from 'boards/actions';\r\nimport List from './List';\r\nimport NewList from './NewList';\r\nimport './ListOfLists.scss';\r\n\r\nexport interface ListOfListsProps {\r\n  boardId: string;\r\n}\r\n\r\nconst ListOfLists: FC<ListOfListsProps> = ({ boardId }) => {\r\n  const lists = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.byId[boardId]?.lists || []\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createList(boardId, title)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (listId: string) => dispatch(deleteList(boardId, listId)),\r\n    [boardId, dispatch]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (listId: string, title: string) => dispatch(changeList(listId, title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onListMove = useCallback(\r\n    (fromIndex: number, toIndex: number) =>\r\n      dispatch(moveList(boardId, fromIndex, toIndex)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onCardMove = useCallback(\r\n    (\r\n      fromListId: string,\r\n      toListId: string,\r\n      fromIndex: number,\r\n      toIndex: number\r\n    ) => dispatch(moveCard(fromListId, toListId, fromIndex, toIndex)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, type } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    if (type === 'card') {\r\n      const { droppableId: fromListId, index: fromIndex } = source;\r\n      const { droppableId: toListId, index: toIndex } = destination;\r\n\r\n      if (fromListId === toListId && fromIndex === toIndex) {\r\n        return;\r\n      }\r\n\r\n      onCardMove(fromListId, toListId, fromIndex, toIndex);\r\n    } else if (type === 'list') {\r\n      if (source.index === destination.index) return;\r\n\r\n      onListMove(source.index, destination.index);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"lists\">\r\n        <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"list\">\r\n          {provided => (\r\n            <ul\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"lists__ul\"\r\n            >\r\n              {lists.map((id, index) => (\r\n                <li key={id} className=\"lists__ul-item\">\r\n                  <List\r\n                    index={index}\r\n                    id={id}\r\n                    onEdit={onEdit}\r\n                    onDelete={onDelete}\r\n                  />\r\n                </li>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n        <NewList onCreate={onCreate} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfLists);\r\n","import React, { FC, WheelEvent } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR } from 'utils';\r\nimport { AppState } from 'app/types';\r\nimport './BoardPage.scss';\r\nimport ListOfLists from 'lists';\r\nimport NotFoundPage from 'app/views/NotFoundPage/NotFoundPage';\r\n\r\nexport interface BoardPageProps extends RouteComponentProps<{ id: string }> {}\r\n\r\nconst BoardPage: FC<BoardPageProps> = ({ match }) => {\r\n  const intl = useIntl();\r\n\r\n  const boardId = match.params.id;\r\n  const boardExist = useSelector<AppState, boolean>(\r\n    state => !!state.boards.byId[boardId]\r\n  );\r\n\r\n  if (boardExist) {\r\n    const onWheel = ({\r\n      target,\r\n      currentTarget,\r\n      deltaY,\r\n    }: WheelEvent<HTMLDivElement>) => {\r\n      if (window.innerHeight <= 600) return;\r\n      if ((target as HTMLElement)?.closest('.lists__list')) return;\r\n      currentTarget.scrollTo({\r\n        left:\r\n          currentTarget.scrollLeft + deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n      });\r\n    };\r\n\r\n    return (\r\n      <main className=\"board-page\" onWheel={onWheel}>\r\n        <ListOfLists boardId={boardId} />\r\n      </main>\r\n    );\r\n  } else\r\n    return (\r\n      <NotFoundPage\r\n        message={intl.formatMessage({\r\n          id: 'app/board404',\r\n          defaultMessage: \"Such board doesn't exist\",\r\n        })}\r\n      />\r\n    );\r\n};\r\n\r\nexport default BoardPage;\r\n","import React, { FC, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport { preventDefault, useToggle } from 'utils';\r\nimport { AppState } from 'app/types';\r\nimport { FieldEditor } from 'shared';\r\nimport './BoardLink.scss';\r\n\r\nexport interface BoardLinkProps {\r\n  id: string;\r\n  onEdit: (id: string, newTitle: string) => any;\r\n  onDelete: (id: string) => any;\r\n}\r\n\r\nconst BoardLink: FC<BoardLinkProps> = ({ id, onEdit, onDelete }) => {\r\n  const intl = useIntl();\r\n\r\n  const title = useSelector<AppState, string>(\r\n    ({ boards }) => boards.byId[id].title\r\n  );\r\n\r\n  const [editMode, toggleEditMode] = useToggle(false);\r\n\r\n  const handleSubmit = (newTitle: string) => onEdit(id, newTitle);\r\n  const handleDelete = () => onDelete(id);\r\n\r\n  return (\r\n    <NavLink\r\n      to={`/boards/${id}`}\r\n      className=\"boards-navigation__link\"\r\n      onClick={editMode ? preventDefault : undefined}\r\n    >\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'boards/title',\r\n          defaultMessage: 'Title',\r\n        })}\r\n        value={title}\r\n        iconToggle={true}\r\n        onEditToggle={toggleEditMode}\r\n        onSubmit={handleSubmit}\r\n        onDelete={handleDelete}\r\n        textareaClassName=\"boards-navigation__link-textarea\"\r\n      />\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default memo(BoardLink);\r\n","import React, { FC, memo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { FieldEditor } from 'shared';\r\nimport './NewBoard.scss';\r\n\r\nexport interface NewBoardProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewBoard: FC<NewBoardProps> = ({ onCreate }) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <div className=\"boards-navigation__new-board\">\r\n      <FieldEditor\r\n        fieldName={intl.formatMessage({\r\n          id: 'boards/title',\r\n          defaultMessage: 'Title',\r\n        })}\r\n        displayOnViewMode={intl.formatMessage({\r\n          id: 'boards/new-board',\r\n          defaultMessage: 'Create board',\r\n        })}\r\n        titles={{\r\n          edit: intl.formatMessage({\r\n            id: 'create',\r\n            defaultMessage: 'Create',\r\n          }),\r\n        }}\r\n        exitOnSubmit={false}\r\n        onSubmit={onCreate}\r\n        textareaClassName=\"boards-navigation__link-textarea\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewBoard);\r\n","import React, { FC, WheelEvent, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR } from 'utils';\r\nimport { AppState } from 'app/types';\r\nimport { createBoard, deleteBoard, changeBoard } from '../actions';\r\nimport BoardLink from './BoardLink';\r\nimport NewBoard from './NewBoard';\r\nimport './BoardsNavigation.scss';\r\n\r\nconst BoardsNavigation: FC = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const boardsIds = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.allIds\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createBoard(title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (boardId: string) => {\r\n      if (history.location.pathname.includes(boardId)) history.push('/boards/');\r\n      dispatch(deleteBoard(boardId));\r\n    },\r\n    [dispatch, history]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (boardId: string, newTitle: string) => {\r\n      dispatch(changeBoard(boardId, newTitle));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onWheel = ({\r\n    target,\r\n    currentTarget,\r\n    deltaY,\r\n  }: WheelEvent<HTMLDivElement>) => {\r\n    if ((target as HTMLElement)?.closest('.field-editor--edit')) return;\r\n    currentTarget.scrollTo({\r\n      left:\r\n        currentTarget.scrollLeft + deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <nav className=\"boards-navigation\" onWheel={onWheel}>\r\n      <ul className=\"boards-navigation__list\">\r\n        {boardsIds.map(id => (\r\n          <li key={id}>\r\n            <BoardLink id={id} onDelete={onDelete} onEdit={onEdit} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <NewBoard onCreate={onCreate} />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default BoardsNavigation;\r\n","import React, { FC } from 'react';\nimport { IntlProvider, useIntl } from 'react-intl';\nimport { Switch, Route } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport 'normalize.css';\nimport './App.scss';\nimport { AppState } from './types';\nimport translations from 'localization/data';\nimport Header from './Header/Header';\nimport PhotoSignature from './PhotoSignature/PhotoSignature';\nimport NotFoundPage from './views/NotFoundPage/NotFoundPage';\nimport HomePage from './views/HomePage/HomePage';\nimport BoardPage from './views/BoardPage/BoardPage';\nimport BoardsNavigation from 'boards';\n\nconst App: FC = () => {\n  const locale = useSelector<AppState, string>(\n    ({ locale }) => locale.languageCode\n  );\n  const theme = useSelector<AppState, string>(({ theme }) => theme.theme);\n\n  return (\n    <IntlProvider locale={locale} messages={translations[locale].translation}>\n      <div id=\"theme\" className={`_theme--${theme}`}>\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact={true} component={HomePage} />\n          <Route\n            path=\"/boards\"\n            render={() => (\n              <>\n                <BoardsNavigation />\n                <Route path=\"/boards/:id\" component={BoardPage} />\n              </>\n            )}\n          />\n          <Route path=\"*\" component={PageNotFound} />\n        </Switch>\n        <PhotoSignature />\n      </div>\n    </IntlProvider>\n  );\n};\n\nconst PageNotFound: FC = () => {\n  const intl = useIntl();\n\n  return (\n    <NotFoundPage\n      message={intl.formatMessage({\n        id: 'app/page404',\n        defaultMessage: \"Such page doesn't exist\",\n      })}\n    />\n  );\n};\n\nexport default App;\n","import throttle from 'lodash/throttle';\r\nimport store from './store';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (!serializedState) return;\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const saveState = () => {\r\n  try {\r\n    const serializedState = JSON.stringify(store.getState());\r\n    localStorage.setItem('state', serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const watchState = throttle(() => {\r\n  store.subscribe(saveState);\r\n}, 1000);\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  LocaleActionTypes,\r\n  LocaleState,\r\n  LocaleActions,\r\n  SetLanguageAction,\r\n} from './types';\r\nimport translations from './data';\r\n\r\nconst { SET_LANGUAGE } = LocaleActionTypes;\r\n\r\nconst preferredLanguage = navigator.language?.slice(0, 2);\r\nlet language: string = 'en';\r\nif (preferredLanguage in translations) language = preferredLanguage;\r\n\r\nconst initialState: LocaleState = {\r\n  languageCode: language,\r\n  languageName: translations[language].name,\r\n};\r\n\r\nconst localeReducer: Reducer<LocaleState, LocaleActions> = (\r\n  state = initialState,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case SET_LANGUAGE: {\r\n      return {\r\n        ...state,\r\n        ...(payload as SetLanguageAction['payload']),\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default localeReducer;\r\n","import themesData from './themesData.json';\r\nimport { Reducer } from 'redux';\r\nimport { ThemeActionTypes, ThemeActions, ThemeState } from './types';\r\n\r\nconst { TOGGLE_THEME } = ThemeActionTypes;\r\n\r\nconst initialState: ThemeState = {\r\n  theme: 'light',\r\n  data: themesData.light,\r\n};\r\n\r\nconst themeReducer: Reducer<ThemeState, ThemeActions> = (\r\n  state = initialState,\r\n  { type }\r\n) => {\r\n  switch (type) {\r\n    case TOGGLE_THEME: {\r\n      const newTheme = state.theme === 'light' ? 'dark' : 'light';\r\n      return {\r\n        ...state,\r\n        theme: newTheme,\r\n        data: themesData[newTheme],\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default themeReducer;\r\n","import {\r\n  BoardActionTypes,\r\n  BoardsState,\r\n  BoardActions,\r\n  CreateBoardAction,\r\n  DeleteBoardAction,\r\n  ChangeBoardAction,\r\n  MoveListAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n} from 'lists/types';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\nconst { CREATE_LIST, DELETE_LIST } = ListActionTypes;\r\n\r\nconst initialState: BoardsState = {\r\n  byId: {},\r\n  allIds: [],\r\n};\r\n\r\nconst boardReducer: Reducer<\r\n  BoardsState,\r\n  BoardActions | CreateListAction | DeleteListAction\r\n> = (state = initialState, { type, payload }): BoardsState => {\r\n  switch (type) {\r\n    case CREATE_BOARD: {\r\n      const { boardId, title } = payload as CreateBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { id: boardId, title, lists: [] },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds: [...state.allIds, boardId],\r\n      };\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { boardId } = payload as DeleteBoardAction['payload'];\r\n\r\n      const { [boardId]: ignore, ...byId } = state.byId;\r\n      const allIds = state.allIds.filter(id => id !== boardId);\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds,\r\n      };\r\n    }\r\n\r\n    case CHANGE_BOARD: {\r\n      const { boardId, title } = payload as ChangeBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { ...state.byId[boardId], title },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case MOVE_LIST: {\r\n      const {\r\n        boardId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveListAction['payload'];\r\n\r\n      const byId = { ...state.byId };\r\n      const board = { ...byId[boardId] };\r\n      const lists = [...board.lists];\r\n\r\n      const list = lists.splice(fromIndex, 1);\r\n      lists.splice(toIndex, 0, ...list);\r\n\r\n      board.lists = lists;\r\n      byId[boardId] = board;\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case CREATE_LIST: {\r\n      const { boardId, listId } = payload as CreateListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n      board.lists = [...board.lists, listId];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const {\r\n        boardId,\r\n        listId: targetListId,\r\n      } = payload as DeleteListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n\r\n      board.lists = board.lists.filter(listId => listId !== targetListId);\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default boardReducer;\r\n","import {\r\n  ListActionTypes,\r\n  ListsState,\r\n  ListActions,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n  ChangeListAction,\r\n  MoveCardAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n} from 'cards/types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\nconst { CREATE_CARD, DELETE_CARD } = CardActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: ListsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  ListsState,\r\n  ListActions | CreateCardAction | DeleteCardAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): ListsState => {\r\n  switch (type) {\r\n    case CREATE_LIST: {\r\n      const { listId, title } = payload as CreateListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { id: listId, title, cards: [] },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { listId } = payload as DeleteListAction['payload'];\r\n\r\n      const { [listId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_LIST: {\r\n      const { listId, title } = payload as ChangeListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], title },\r\n      };\r\n    }\r\n\r\n    case CREATE_CARD: {\r\n      const { listId, cardId } = payload as CreateCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = [...list.cards, cardId];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { listId, cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = list.cards.filter(id => id !== cardId);\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case MOVE_CARD: {\r\n      const {\r\n        fromListId,\r\n        toListId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveCardAction['payload'];\r\n\r\n      const newState = { ...state };\r\n\r\n      const fromList = { ...newState[fromListId] };\r\n      fromList.cards = [...fromList.cards];\r\n      const card = fromList.cards.splice(fromIndex, 1);\r\n      newState[fromListId] = fromList;\r\n\r\n      const toList = { ...newState[toListId] };\r\n      toList.cards = [...toList.cards];\r\n      toList.cards.splice(toIndex, 0, ...card);\r\n      newState[toListId] = toList;\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { listsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: ListsState = {};\r\n      for (const prop in state) {\r\n        if (state.hasOwnProperty(prop) && !listsIds.includes(prop)) {\r\n          newState[prop] = state[prop];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  CardActionTypes,\r\n  CardsState,\r\n  CardActions,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nimport { ListActionTypes, DeleteListAction } from 'lists/types';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\nconst { DELETE_LIST } = ListActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: CardsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  CardsState,\r\n  CardActions | DeleteListAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): CardsState => {\r\n  switch (type) {\r\n    case CREATE_CARD: {\r\n      const { cardId, content } = payload as CreateCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { id: cardId, content },\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const { [cardId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_CARD: {\r\n      const { cardId, content } = payload as ChangeCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { ...state[cardId], content },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { cardsIds } = payload as DeleteListAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { cardsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { combineReducers } from 'redux';\r\nimport localeReducer from 'localization/reducer';\r\nimport themeReducer from 'themes/reducer';\r\nimport boardReducer from 'boards/reducer';\r\nimport listReducer from 'lists/reducer';\r\nimport cardReducer from 'cards/reducer';\r\n\r\nexport default combineReducers({\r\n  locale: localeReducer,\r\n  theme: themeReducer,\r\n  boards: boardReducer,\r\n  lists: listReducer,\r\n  cards: cardReducer,\r\n});\r\n","import { Store, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { AppState, AllActions } from './types';\r\nimport { loadState } from './localStorage';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = [ReduxThunk];\r\n\r\nconst store: Store<AppState, AllActions> = createStore(\r\n  rootReducer,\r\n  loadState(),\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from 'app/App';\nimport store from 'app/store';\nimport { watchState } from 'app/localStorage';\n\nwatchState();\n\nReactDOM.render(\n  <StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}