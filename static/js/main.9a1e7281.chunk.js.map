{"version":3,"sources":["utils/index.ts","boards/types.ts","app/localStorage.ts","lists/types.ts","cards/types.ts","boards/reducer.ts","lists/reducer.ts","cards/reducer.ts","app/rootReducer.ts","app/store.ts","app/Header/Header.tsx","shared/Button/index.tsx","shared/TextArea/index.tsx","shared/FieldEditor/index.tsx","app/HomePage/HomePage.tsx","lists/actions.ts","boards/actions.ts","cards/actions.ts","cards/components/Card.tsx","cards/components/NewCard.tsx","cards/components/ListOfCards.tsx","lists/components/List.tsx","lists/components/NewList.tsx","lists/components/ListOfLists.tsx","app/NotFoundPage/NotFoundPage.tsx","app/BoardPage/BoardPage.tsx","boards/components/BoardLink.tsx","boards/components/NewBoard.tsx","boards/components/BoardsNavigation.tsx","app/App.tsx","index.tsx"],"names":["preventClickDefault","e","preventDefault","HORIZONTAL_SCROLLING_SPEED_FACTOR","BoardActionTypes","saveState","serializedState","JSON","stringify","store","getState","localStorage","setItem","err","watchState","throttle","subscribe","ListActionTypes","CREATE_BOARD","CHANGE_BOARD","DELETE_BOARD","MOVE_LIST","CREATE_LIST","DELETE_LIST","CHANGE_LIST","MOVE_CARD","CardActionTypes","initialState","byId","allIds","boardReducer","state","type","payload","boardId","title","id","lists","filter","fromIndex","toIndex","board","list","splice","listId","targetListId","CREATE_CARD","DELETE_CARD","CHANGE_CARD","listReducer","cards","rest","cardId","fromListId","toListId","newState","fromList","card","toList","listsIds","prop","hasOwnProperty","includes","content","cardsIds","combineReducers","boards","cardReducer","middleware","ReduxThunk","createStore","rootReducer","getItem","parse","loadState","composeWithDevTools","applyMiddleware","Header","className","to","exact","Button","forwardRef","ref","derivedClassName","attributes","TextArea","labelValue","isInvalid","value","useState","hideLabel","setHideLabel","useEffect","textAreaClassName","textAreaProps","spellCheck","TextareaAutosize","FieldEditor","fieldName","displayOnViewMode","initialEditMode","derivedEditMode","editMode","useIconToggler","onSubmit","onDelete","onEditToggle","setEditMode","currentValue","setCurrentValue","textAreaRef","useRef","trim","toggleEdit","handleSubmit","trimmedCurrentValue","current","focus","onClick","undefined","rowsMax","disabled","required","onChange","target","replace","onKeyDown","key","fontSize","HomePage","memo","index","onEdit","useSelector","handleDelete","newContent","shouldDrag","setShouldDrag","toggleShouldDrag","draggableId","disableInteractiveElementBlocking","provided","style","draggableProps","element","dragHandleProps","innerRef","position","createPortal","document","getElementById","onCreate","dispatch","useDispatch","useCallback","v4","createCard","deleteCard","changeCard","droppableId","droppableProps","map","placeholder","newTitle","NewList","createList","deleteList","changeList","onListMove","moveList","onCardMove","moveCard","onDragEnd","result","destination","source","direction","NotFoundPage","message","history","useHistory","goBack","BoardPage","match","params","onWheel","currentTarget","deltaY","closest","scrollTo","left","scrollLeft","behavior","FieldEditProps","BoardsNavigation","boardsIds","createBoard","location","pathname","push","flat","deleteBoard","changeBoard","App","basename","process","path","component","render","ReactDOM"],"mappings":"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","file":"static/js/main.9a1e7281.chunk.js","sourcesContent":["import { MouseEvent } from 'react';\r\n\r\nexport * from './types';\r\n\r\nexport const cloneDeep = <T extends {} | []>(structure: T): T =>\r\n  JSON.parse(JSON.stringify(structure));\r\n\r\nexport const preventClickDefault = (e: MouseEvent) => e.preventDefault();\r\n\r\nexport const HORIZONTAL_SCROLLING_SPEED_FACTOR = 0.75;\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'utils';\r\nimport { ActionCreator } from 'redux';\r\n\r\nexport enum BoardActionTypes {\r\n  CREATE_BOARD = 'CREATE_BOARD',\r\n  DELETE_BOARD = 'DELETE_BOARD',\r\n  CHANGE_BOARD = 'CHANGE_BOARD',\r\n  MOVE_LIST = 'MOVE_LIST',\r\n}\r\nconst {\r\n  CREATE_BOARD,\r\n  CHANGE_BOARD,\r\n  DELETE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport interface CreateBoardAction {\r\n  type: typeof CREATE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\nexport interface DeleteBoardAction {\r\n  type: typeof DELETE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    listsIds: string[];\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteBoardThunk = ActionCreator<\r\n  ThunkAction<DeleteBoardAction, AppState, void, DeleteBoardAction>\r\n>;\r\n\r\nexport interface ChangeBoardAction {\r\n  type: typeof CHANGE_BOARD;\r\n  payload: {\r\n    boardId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveListAction {\r\n  type: typeof MOVE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type BoardActions =\r\n  | CreateBoardAction\r\n  | DeleteBoardAction\r\n  | ChangeBoardAction\r\n  | MoveListAction;\r\n\r\nexport interface BoardData {\r\n  id: string;\r\n  title: string;\r\n  lists: string[];\r\n}\r\n\r\nexport interface BoardsState {\r\n  byId: {\r\n    [prop: string]: BoardData;\r\n  };\r\n  allIds: string[];\r\n}\r\n","import throttle from 'lodash/throttle';\r\nimport store from './store';\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (!serializedState) return;\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const saveState = () => {\r\n  try {\r\n    const serializedState = JSON.stringify(store.getState());\r\n    localStorage.setItem('state', serializedState);\r\n  } catch (err) {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const watchState = throttle(() => {\r\n  store.subscribe(saveState);\r\n}, 1000);\r\n","import { ActionCreator } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppState } from 'utils';\r\n\r\nexport enum ListActionTypes {\r\n  CREATE_LIST = 'CREATE_LIST',\r\n  DELETE_LIST = 'DELETE_LIST',\r\n  CHANGE_LIST = 'CHANGE_LIST',\r\n  MOVE_CARD = 'MOVE_CARD',\r\n}\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport interface CreateListAction {\r\n  type: typeof CREATE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteListAction {\r\n  type: typeof DELETE_LIST;\r\n  payload: {\r\n    boardId: string;\r\n    listId: string;\r\n    cardsIds: string[];\r\n  };\r\n}\r\n\r\nexport type DeleteListThunk = ActionCreator<\r\n  ThunkAction<DeleteListAction, AppState, void, DeleteListAction>\r\n>;\r\n\r\nexport interface ChangeListAction {\r\n  type: typeof CHANGE_LIST;\r\n  payload: {\r\n    listId: string;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport interface MoveCardAction {\r\n  type: typeof MOVE_CARD;\r\n  payload: {\r\n    fromListId: string;\r\n    toListId: string;\r\n    fromIndex: number;\r\n    toIndex: number;\r\n  };\r\n}\r\n\r\nexport type ListActions =\r\n  | CreateListAction\r\n  | DeleteListAction\r\n  | ChangeListAction\r\n  | MoveCardAction;\r\n\r\nexport interface ListData {\r\n  id: string;\r\n  title: string;\r\n  cards: string[];\r\n}\r\n\r\nexport interface ListsState {\r\n  [prop: string]: ListData;\r\n}\r\n","export enum CardActionTypes {\r\n  CREATE_CARD = 'CREATE_CARD',\r\n  DELETE_CARD = 'DELETE_CARD',\r\n  CHANGE_CARD = 'CHANGE_CARD',\r\n}\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport interface CreateCardAction {\r\n  type: typeof CREATE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport interface DeleteCardAction {\r\n  type: typeof DELETE_CARD;\r\n  payload: {\r\n    listId: string;\r\n    cardId: string;\r\n  };\r\n}\r\n\r\nexport interface ChangeCardAction {\r\n  type: typeof CHANGE_CARD;\r\n  payload: {\r\n    cardId: string;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport type CardActions =\r\n  | CreateCardAction\r\n  | DeleteCardAction\r\n  | ChangeCardAction;\r\n\r\nexport interface CardData {\r\n  id: string;\r\n  content: string;\r\n}\r\n\r\nexport interface CardsState {\r\n  [prop: string]: CardData;\r\n}\r\n","import {\r\n  BoardActionTypes,\r\n  BoardsState,\r\n  BoardActions,\r\n  CreateBoardAction,\r\n  DeleteBoardAction,\r\n  ChangeBoardAction,\r\n  MoveListAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n} from 'lists/types';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\nconst { CREATE_LIST, DELETE_LIST } = ListActionTypes;\r\n\r\nconst initialState: BoardsState = {\r\n  byId: {},\r\n  allIds: [],\r\n};\r\n\r\nconst boardReducer: Reducer<\r\n  BoardsState,\r\n  BoardActions | CreateListAction | DeleteListAction\r\n> = (state = initialState, { type, payload }): BoardsState => {\r\n  switch (type) {\r\n    case CREATE_BOARD: {\r\n      const { boardId, title } = payload as CreateBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { id: boardId, title, lists: [] },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds: [...state.allIds, boardId],\r\n      };\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { boardId } = payload as DeleteBoardAction['payload'];\r\n\r\n      const { [boardId]: ignore, ...byId } = state.byId;\r\n      const allIds = state.allIds.filter(id => id !== boardId);\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n        allIds,\r\n      };\r\n    }\r\n\r\n    case CHANGE_BOARD: {\r\n      const { boardId, title } = payload as ChangeBoardAction['payload'];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: { ...state.byId[boardId], title },\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case MOVE_LIST: {\r\n      const {\r\n        boardId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveListAction['payload'];\r\n\r\n      const byId = { ...state.byId };\r\n      const board = { ...byId[boardId] };\r\n      const lists = [...board.lists];\r\n\r\n      const list = lists.splice(fromIndex, 1);\r\n      lists.splice(toIndex, 0, ...list);\r\n\r\n      board.lists = lists;\r\n      byId[boardId] = board;\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case CREATE_LIST: {\r\n      const { boardId, listId } = payload as CreateListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n      board.lists = [...board.lists, listId];\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const {\r\n        boardId,\r\n        listId: targetListId,\r\n      } = payload as DeleteListAction['payload'];\r\n\r\n      const board = {\r\n        ...state.byId[boardId],\r\n      };\r\n\r\n      board.lists = board.lists.filter(listId => listId !== targetListId);\r\n\r\n      const byId = {\r\n        ...state.byId,\r\n        [boardId]: board,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        byId,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default boardReducer;\r\n","import {\r\n  ListActionTypes,\r\n  ListsState,\r\n  ListActions,\r\n  CreateListAction,\r\n  DeleteListAction,\r\n  ChangeListAction,\r\n  MoveCardAction,\r\n} from './types';\r\nimport { Reducer } from 'react';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n} from 'cards/types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\nconst { CREATE_CARD, DELETE_CARD } = CardActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: ListsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  ListsState,\r\n  ListActions | CreateCardAction | DeleteCardAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): ListsState => {\r\n  switch (type) {\r\n    case CREATE_LIST: {\r\n      const { listId, title } = payload as CreateListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { id: listId, title, cards: [] },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { listId } = payload as DeleteListAction['payload'];\r\n\r\n      const { [listId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_LIST: {\r\n      const { listId, title } = payload as ChangeListAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], title },\r\n      };\r\n    }\r\n\r\n    case CREATE_CARD: {\r\n      const { listId, cardId } = payload as CreateCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = [...list.cards, cardId];\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { listId, cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const list = { ...state[listId] };\r\n      list.cards = list.cards.filter(id => id !== cardId);\r\n\r\n      return {\r\n        ...state,\r\n        [listId]: list,\r\n      };\r\n    }\r\n\r\n    case MOVE_CARD: {\r\n      const {\r\n        fromListId,\r\n        toListId,\r\n        fromIndex,\r\n        toIndex,\r\n      } = payload as MoveCardAction['payload'];\r\n\r\n      const newState = { ...state };\r\n\r\n      const fromList = { ...newState[fromListId] };\r\n      fromList.cards = [...fromList.cards];\r\n      const card = fromList.cards.splice(fromIndex, 1);\r\n      newState[fromListId] = fromList;\r\n\r\n      const toList = { ...newState[toListId] };\r\n      toList.cards = [...toList.cards];\r\n      toList.cards.splice(toIndex, 0, ...card);\r\n      newState[toListId] = toList;\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { listsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: ListsState = {};\r\n      for (const prop in state) {\r\n        if (state.hasOwnProperty(prop) && !listsIds.includes(prop)) {\r\n          newState[prop] = state[prop];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { Reducer } from 'redux';\r\nimport {\r\n  CardActionTypes,\r\n  CardsState,\r\n  CardActions,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nimport { ListActionTypes, DeleteListAction } from 'lists/types';\r\nimport { BoardActionTypes, DeleteBoardAction } from 'boards/types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\nconst { DELETE_LIST } = ListActionTypes;\r\nconst { DELETE_BOARD } = BoardActionTypes;\r\n\r\nconst initialState: CardsState = {};\r\n\r\nconst listReducer: Reducer<\r\n  CardsState,\r\n  CardActions | DeleteListAction | DeleteBoardAction\r\n> = (state = initialState, { type, payload }): CardsState => {\r\n  switch (type) {\r\n    case CREATE_CARD: {\r\n      const { cardId, content } = payload as CreateCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { id: cardId, content },\r\n      };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { cardId } = payload as DeleteCardAction['payload'];\r\n\r\n      const { [cardId]: ignore, ...rest } = state;\r\n\r\n      return {\r\n        ...rest,\r\n      };\r\n    }\r\n\r\n    case CHANGE_CARD: {\r\n      const { cardId, content } = payload as ChangeCardAction['payload'];\r\n\r\n      return {\r\n        ...state,\r\n        [cardId]: { ...state[cardId], content },\r\n      };\r\n    }\r\n\r\n    case DELETE_LIST: {\r\n      const { cardsIds } = payload as DeleteListAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    case DELETE_BOARD: {\r\n      const { cardsIds } = payload as DeleteBoardAction['payload'];\r\n\r\n      const newState: CardsState = {};\r\n      for (const id in state) {\r\n        if (state.hasOwnProperty(id) && !cardsIds.includes(id)) {\r\n          newState[id] = state[id];\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default listReducer;\r\n","import { combineReducers } from 'redux';\r\nimport boardReducer from 'boards/reducer';\r\nimport listReducer from 'lists/reducer';\r\nimport cardReducer from 'cards/reducer';\r\n\r\nexport default combineReducers({\r\n  boards: boardReducer,\r\n  lists: listReducer,\r\n  cards: cardReducer,\r\n});\r\n","import { Store, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { AppState, AllActions } from 'utils';\r\nimport { loadState } from './localStorage';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = [ReduxThunk];\r\n\r\nconst store: Store<AppState, AllActions> = createStore(\r\n  rootReducer,\r\n  loadState(),\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './styles.scss';\r\n\r\nconst Header: FC = () => {\r\n  return (\r\n    <header className=\"site-header\">\r\n      <nav className=\"site-navigation\">\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\" exact={true}>\r\n              Home\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/boards\">Boards</NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { forwardRef, ComponentProps } from 'react';\r\nimport './styles.scss';\r\n\r\nexport const Button = forwardRef<HTMLButtonElement, ComponentProps<'button'>>(\r\n  ({ className: derivedClassName = '', ...attributes }, ref) => {\r\n    let className = 'button';\r\n    if (derivedClassName) className += ' ' + derivedClassName;\r\n    return <button className={className} {...attributes} ref={ref} />;\r\n  }\r\n);\r\n","import React, { useState, forwardRef, useEffect } from 'react';\r\nimport { TextareaAutosize, TextareaAutosizeProps } from '@material-ui/core';\r\nimport './styles.scss';\r\n\r\nexport interface TextAreaProps extends TextareaAutosizeProps {\r\n  labelValue?: string;\r\n  isInvalid?: boolean;\r\n}\r\n\r\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\r\n  (\r\n    {\r\n      labelValue = false,\r\n      isInvalid = false,\r\n      className: derivedClassName,\r\n      value,\r\n      ...attributes\r\n    },\r\n    ref\r\n  ) => {\r\n    const [hideLabel, setHideLabel] = useState(!!value);\r\n    useEffect(() => {\r\n      setHideLabel(!!value);\r\n    }, [value]);\r\n\r\n    let textAreaClassName = 'textarea';\r\n    if (isInvalid) textAreaClassName += ' invalid';\r\n    if (labelValue && hideLabel) textAreaClassName += ' hide-label';\r\n    if (derivedClassName) textAreaClassName += ' ' + derivedClassName;\r\n\r\n    const textAreaProps = {\r\n      className: textAreaClassName,\r\n      spellCheck: false,\r\n      value,\r\n      ...attributes,\r\n      ref,\r\n    };\r\n\r\n    return (\r\n      <div className=\"textarea-container\">\r\n        {labelValue ? (\r\n          <label className=\"label\">\r\n            <span className={`label-value${hideLabel ? ' hide' : ''}`}>\r\n              {labelValue}\r\n            </span>\r\n            <TextareaAutosize {...textAreaProps} ref={ref} />\r\n          </label>\r\n        ) : (\r\n          <TextareaAutosize {...textAreaProps} ref={ref} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  ChangeEvent,\r\n  KeyboardEvent,\r\n} from 'react';\r\nimport { preventClickDefault } from 'utils';\r\nimport { Button, TextArea } from 'shared';\r\nimport {\r\n  EditOutlined as EditIcon,\r\n  DeleteOutlineRounded as DeleteIcon,\r\n  DoneRounded as SubmitIcon,\r\n  CloseRounded as CancelIcon,\r\n} from '@material-ui/icons';\r\nimport './styles.scss';\r\n\r\nexport interface FieldEditorProps {\r\n  fieldName: string;\r\n  displayOnViewMode?: string;\r\n  value?: string;\r\n  initialEditMode?: boolean;\r\n  editMode?: boolean;\r\n  useIconToggler?: boolean;\r\n  onSubmit: (title: any) => any;\r\n  onDelete?: () => any;\r\n  onEditToggle?: () => any;\r\n}\r\n\r\nexport const FieldEditor: FC<FieldEditorProps> = ({\r\n  fieldName,\r\n  displayOnViewMode,\r\n  value = '',\r\n  initialEditMode = false,\r\n  editMode: derivedEditMode,\r\n  useIconToggler = false,\r\n  onSubmit,\r\n  onDelete,\r\n  onEditToggle,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(derivedEditMode ?? initialEditMode);\r\n  const [currentValue, setCurrentValue] = useState(value);\r\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n  const isInvalid = !currentValue.trim();\r\n\r\n  const toggleEdit = () => {\r\n    setCurrentValue(value);\r\n    setEditMode(!editMode);\r\n    if (onEditToggle) onEditToggle();\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    const value = e.target.value.replace(/\\r\\n|\\r|\\n/gm, ' ');\r\n    setCurrentValue(value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const trimmedCurrentValue = currentValue.trim();\r\n    if (!trimmedCurrentValue) return;\r\n    if (value !== trimmedCurrentValue) {\r\n      value = trimmedCurrentValue;\r\n      onSubmit(trimmedCurrentValue);\r\n    }\r\n    toggleEdit();\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Escape') toggleEdit();\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editMode) textAreaRef.current?.focus();\r\n  }, [editMode]);\r\n\r\n  return (\r\n    <form className={`field-editor${editMode ? ' edit' : ''}`}>\r\n      {/* disabled textarea ignores clicks */}\r\n      {!editMode && !useIconToggler && (\r\n        <button className=\"click-overlay\" onClick={toggleEdit} title=\"Edit\" />\r\n      )}\r\n      <TextArea\r\n        labelValue={fieldName}\r\n        title={editMode ? fieldName : undefined}\r\n        isInvalid={isInvalid}\r\n        value={\r\n          displayOnViewMode && !editMode ? displayOnViewMode : currentValue\r\n        }\r\n        rowsMax={3}\r\n        disabled={!editMode}\r\n        required={true}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        ref={textAreaRef}\r\n      />\r\n      {!editMode && useIconToggler && (\r\n        <div className=\"edit-button-container\" onClick={preventClickDefault}>\r\n          <Button\r\n            title=\"Edit\"\r\n            className=\"field-editor-button edit-button\"\r\n            onClick={toggleEdit}\r\n          >\r\n            <EditIcon fontSize=\"inherit\" />\r\n          </Button>\r\n        </div>\r\n      )}\r\n      <div className=\"buttons-container\" onClick={preventClickDefault}>\r\n        {editMode && (\r\n          <>\r\n            <div>\r\n              <Button\r\n                title=\"Submit\"\r\n                className=\"field-editor-button submit-button\"\r\n                onClick={handleSubmit}\r\n                disabled={isInvalid}\r\n              >\r\n                <SubmitIcon fontSize=\"inherit\" />\r\n              </Button>\r\n              <Button\r\n                className=\"field-editor-button\"\r\n                title=\"Cancel\"\r\n                onClick={toggleEdit}\r\n              >\r\n                <CancelIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            </div>\r\n            {onDelete && (\r\n              <Button\r\n                className=\"field-editor-button\"\r\n                title=\"Delete\"\r\n                onClick={onDelete}\r\n              >\r\n                <DeleteIcon fontSize=\"inherit\" />\r\n              </Button>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'shared';\r\nimport './styles.scss';\r\n\r\nconst HomePage: FC = () => {\r\n  return (\r\n    <main className=\"home-page\">\r\n      <h1>Trello clone</h1>\r\n      <Link to=\"/boards\">\r\n        <Button>Get started</Button>\r\n      </Link>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  ListActionTypes,\r\n  CreateListAction,\r\n  ChangeListAction,\r\n  DeleteListThunk,\r\n  MoveCardAction,\r\n} from './types';\r\nconst { CREATE_LIST, DELETE_LIST, CHANGE_LIST, MOVE_CARD } = ListActionTypes;\r\n\r\nexport const createList = (\r\n  boardId: string,\r\n  title: string\r\n): CreateListAction => ({\r\n  type: CREATE_LIST,\r\n  payload: { boardId, listId: v4(), title },\r\n});\r\n\r\nexport const deleteList: DeleteListThunk = (\r\n  boardId: string,\r\n  listId: string\r\n) => (dispatch, getState) => {\r\n  const { lists } = getState();\r\n  const cardsIds = lists[listId].cards;\r\n\r\n  return dispatch({\r\n    type: DELETE_LIST,\r\n    payload: {\r\n      boardId,\r\n      listId,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeList = (\r\n  listId: string,\r\n  title: string\r\n): ChangeListAction => ({\r\n  type: CHANGE_LIST,\r\n  payload: { listId, title },\r\n});\r\n\r\nexport const moveCard = (\r\n  fromListId: string,\r\n  toListId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveCardAction => ({\r\n  type: MOVE_CARD,\r\n  payload: {\r\n    fromListId,\r\n    toListId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","import {\r\n  BoardActionTypes,\r\n  CreateBoardAction,\r\n  ChangeBoardAction,\r\n  DeleteBoardThunk,\r\n  MoveListAction,\r\n} from './types';\r\nimport { v4 } from 'uuid';\r\nconst {\r\n  CREATE_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_BOARD,\r\n  MOVE_LIST,\r\n} = BoardActionTypes;\r\n\r\nexport const createBoard = (title: string): CreateBoardAction => ({\r\n  type: CREATE_BOARD,\r\n  payload: {\r\n    boardId: v4(),\r\n    title,\r\n  },\r\n});\r\n\r\nexport const deleteBoard: DeleteBoardThunk = (boardId: string) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { boards, lists } = getState();\r\n  const listsIds = boards.byId[boardId].lists;\r\n  const cardsIds = listsIds.map(id => lists[id].cards).flat();\r\n\r\n  return dispatch({\r\n    type: DELETE_BOARD,\r\n    payload: {\r\n      boardId,\r\n      listsIds,\r\n      cardsIds,\r\n    },\r\n  });\r\n};\r\n\r\nexport const changeBoard = (\r\n  boardId: string,\r\n  title: string\r\n): ChangeBoardAction => ({\r\n  type: CHANGE_BOARD,\r\n  payload: { boardId, title },\r\n});\r\n\r\nexport const moveList = (\r\n  boardId: string,\r\n  fromIndex: number,\r\n  toIndex: number\r\n): MoveListAction => ({\r\n  type: MOVE_LIST,\r\n  payload: {\r\n    boardId,\r\n    fromIndex,\r\n    toIndex,\r\n  },\r\n});\r\n","import { v4 } from 'uuid';\r\nimport {\r\n  CardActionTypes,\r\n  CreateCardAction,\r\n  DeleteCardAction,\r\n  ChangeCardAction,\r\n} from './types';\r\nconst { CREATE_CARD, DELETE_CARD, CHANGE_CARD } = CardActionTypes;\r\n\r\nexport const createCard = (\r\n  listId: string,\r\n  content: string\r\n): CreateCardAction => ({\r\n  type: CREATE_CARD,\r\n  payload: { listId, cardId: v4(), content },\r\n});\r\n\r\nexport const deleteCard = (\r\n  listId: string,\r\n  cardId: string\r\n): DeleteCardAction => ({\r\n  type: DELETE_CARD,\r\n  payload: { listId, cardId },\r\n});\r\n\r\nexport const changeCard = (\r\n  cardId: string,\r\n  content: string\r\n): ChangeCardAction => ({\r\n  type: CHANGE_CARD,\r\n  payload: { cardId, content },\r\n});\r\n","import React, { FC, ReactElement, useState, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { FieldEditor } from 'shared';\r\nimport { createPortal } from 'react-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from 'utils';\r\n\r\nexport interface CardProps {\r\n  index: number;\r\n  id: string;\r\n  onDelete: (id: string) => any;\r\n  onEdit: (id: string, newContent: string) => any;\r\n}\r\n\r\nconst optionalPortal = (style: any, element: ReactElement): ReactElement => {\r\n  if (style.position !== 'fixed') return element;\r\n  return createPortal(element, document.getElementById('draggable')!);\r\n};\r\n\r\nconst Card: FC<CardProps> = ({ index, id, onDelete, onEdit }) => {\r\n  const content = useSelector<AppState, string>(\r\n    ({ cards }) => cards[id].content\r\n  );\r\n\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newContent: string) => onEdit(id, newContent);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, setShouldDrag] = useState(true);\r\n  const toggleShouldDrag = () => setShouldDrag(!shouldDrag);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided =>\r\n        optionalPortal(\r\n          provided.draggableProps.style,\r\n          <div\r\n            className=\"card\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <FieldEditor\r\n              fieldName=\"Text\"\r\n              value={content}\r\n              onSubmit={handleSubmit}\r\n              onDelete={handleDelete}\r\n              onEditToggle={toggleShouldDrag}\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(Card);\r\n","import React, { FC, useState, memo } from 'react';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewCardProps {\r\n  onCreate: (content: string) => any;\r\n}\r\n\r\nconst NewCard: FC<NewCardProps> = ({ onCreate }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const toggleEditMode = () => setEditMode(!editMode);\r\n\r\n  return (\r\n    <div className=\"card new-card\">\r\n      <FieldEditor\r\n        fieldName=\"Text\"\r\n        editMode={editMode}\r\n        displayOnViewMode=\"New Card\"\r\n        onEditToggle={toggleEditMode}\r\n        onSubmit={onCreate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewCard);\r\n","import React, { FC, useCallback, memo } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createCard, deleteCard, changeCard } from '../actions';\r\nimport Card from './Card';\r\nimport NewCard from './NewCard';\r\nimport { AppState } from 'utils';\r\n\r\nexport interface ListOfCardsProps {\r\n  listId: string;\r\n}\r\n\r\nconst ListOfCards: FC<ListOfCardsProps> = ({ listId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const cardsIds = useSelector<AppState, string[]>(\r\n    ({ lists }) => lists[listId]?.cards || []\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (content: string) => dispatch(createCard(listId, content)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (cardId: string) => dispatch(deleteCard(listId, cardId)),\r\n    [dispatch, listId]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (cardId: string, content: string) => dispatch(changeCard(cardId, content)),\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Droppable droppableId={listId} type=\"card\">\r\n        {provided => (\r\n          <ul\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className=\"list-of-cards\"\r\n          >\r\n            {cardsIds.map((id, index) => (\r\n              <li key={id}>\r\n                <Card\r\n                  index={index}\r\n                  id={id}\r\n                  onDelete={onDelete}\r\n                  onEdit={onEdit}\r\n                />\r\n              </li>\r\n            ))}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n      <NewCard onCreate={onCreate} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfCards);\r\n","import React, { FC, useState, memo } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { FieldEditor } from 'shared';\r\nimport ListOfCard from 'cards';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from 'utils';\r\n\r\nexport interface ListProps {\r\n  index: number;\r\n  id: string;\r\n  onEdit: (listId: string, newTitle: string) => any;\r\n  onDelete: (listId: string) => any;\r\n}\r\n\r\nconst List: FC<ListProps> = ({ index, id, onEdit, onDelete }) => {\r\n  const handleDelete = () => onDelete(id);\r\n  const handleSubmit = (newTitle: string) => onEdit(id, newTitle);\r\n\r\n  const title = useSelector<AppState, string>(({ lists }) => lists[id].title);\r\n\r\n  // Caret insert in edit mode won't work if disableInteractiveElementBlocking\r\n  // will be enabled\r\n  const [shouldDrag, setShouldDrag] = useState(true);\r\n  const toggleShouldDrag = () => setShouldDrag(!shouldDrag);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={id}\r\n      index={index}\r\n      disableInteractiveElementBlocking={shouldDrag}\r\n    >\r\n      {provided => (\r\n        <div\r\n          className=\"list\"\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <header>\r\n            <FieldEditor\r\n              fieldName=\"Title\"\r\n              value={title}\r\n              onDelete={handleDelete}\r\n              onSubmit={handleSubmit}\r\n              onEditToggle={toggleShouldDrag}\r\n            />\r\n          </header>\r\n          <ListOfCard listId={id} />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default memo(List);\r\n","import React, { FC } from 'react';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewListProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewList: FC<NewListProps> = ({ onCreate }) => {\r\n  return (\r\n    <div className=\"list new-list\">\r\n      <FieldEditor\r\n        fieldName=\"Title\"\r\n        onSubmit={onCreate}\r\n        displayOnViewMode=\"New List\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewList;\r\n","import React, { FC, memo, useCallback } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from 'utils';\r\nimport { createList, deleteList, changeList, moveCard } from '../actions';\r\nimport { moveList } from 'boards/actions';\r\nimport List from './List';\r\nimport NewList from './NewList';\r\n\r\nexport interface ListOfListsProps {\r\n  boardId: string;\r\n}\r\n\r\nconst ListOfLists: FC<ListOfListsProps> = ({ boardId }) => {\r\n  const lists = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.byId[boardId]?.lists || []\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createList(boardId, title)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (listId: string) => dispatch(deleteList(boardId, listId)),\r\n    [boardId, dispatch]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (listId: string, title: string) => dispatch(changeList(listId, title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onListMove = useCallback(\r\n    (fromIndex: number, toIndex: number) =>\r\n      dispatch(moveList(boardId, fromIndex, toIndex)),\r\n    [dispatch, boardId]\r\n  );\r\n\r\n  const onCardMove = useCallback(\r\n    (\r\n      fromListId: string,\r\n      toListId: string,\r\n      fromIndex: number,\r\n      toIndex: number\r\n    ) => dispatch(moveCard(fromListId, toListId, fromIndex, toIndex)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { destination, source, type } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    if (type === 'card') {\r\n      const { droppableId: fromListId, index: fromIndex } = source;\r\n      const { droppableId: toListId, index: toIndex } = destination;\r\n\r\n      if (fromListId === toListId && fromIndex === toIndex) {\r\n        return;\r\n      }\r\n\r\n      onCardMove(fromListId, toListId, fromIndex, toIndex);\r\n    } else if (type === 'list') {\r\n      if (source.index === destination.index) return;\r\n\r\n      onListMove(source.index, destination.index);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"list-of-lists\">\r\n        <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"list\">\r\n          {provided => (\r\n            <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n              {lists.map((id, index) => (\r\n                <li key={id}>\r\n                  <List\r\n                    index={index}\r\n                    id={id}\r\n                    onEdit={onEdit}\r\n                    onDelete={onDelete}\r\n                  />\r\n                </li>\r\n              ))}\r\n              {provided.placeholder}\r\n            </ul>\r\n          )}\r\n        </Droppable>\r\n        <NewList onCreate={onCreate} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default memo(ListOfLists);\r\n","import React, { FC } from 'react';\r\nimport './styles.scss';\r\nimport { Button } from 'shared';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport interface NotFoundPageProps {\r\n  message?: string;\r\n}\r\n\r\nconst NotFoundPage: FC<NotFoundPageProps> = ({ message = '' }) => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <main className=\"not-found-page\">\r\n      <div className=\"message\">\r\n        <span className=\"error-code\">404</span>\r\n        <p>{message}</p>\r\n        <Button onClick={history.goBack}>Go back</Button>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default NotFoundPage;\r\n","import React, { FC, WheelEvent } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR, AppState } from 'utils';\r\nimport './styles.scss';\r\nimport ListOfLists from 'lists';\r\nimport NotFoundPage from 'app/NotFoundPage/NotFoundPage';\r\n\r\nexport interface BoardPageProps extends RouteComponentProps<{ id: string }> {}\r\n\r\nconst BoardPage: FC<BoardPageProps> = ({ match }) => {\r\n  const boardId = match.params.id;\r\n  const boardExist = useSelector<AppState, boolean>(\r\n    state => !!state.boards.byId[boardId]\r\n  );\r\n\r\n  if (boardExist) {\r\n    const onWheel = ({\r\n      target,\r\n      currentTarget,\r\n      deltaY,\r\n    }: WheelEvent<HTMLDivElement>) => {\r\n      if ((target as HTMLElement)?.closest('.list')) return;\r\n      currentTarget.scrollTo({\r\n        left: currentTarget.scrollLeft +=\r\n          deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n        behavior: 'smooth',\r\n      });\r\n    };\r\n\r\n    return (\r\n      <main className=\"board-page\" onWheel={onWheel}>\r\n        <ListOfLists boardId={boardId} />\r\n      </main>\r\n    );\r\n  } else return <NotFoundPage message=\"Such board doesn't exist!\" />;\r\n};\r\n\r\nexport default BoardPage;\r\n","import React, { FC, useState, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FieldEditor } from 'shared';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from 'utils';\r\n\r\nexport interface BoardLinkProps {\r\n  id: string;\r\n  onEdit: (id: string, newTitle: string) => any;\r\n  onDelete: (id: string) => any;\r\n}\r\n\r\nconst BoardLink: FC<BoardLinkProps> = ({ id, onEdit, onDelete }) => {\r\n  const title = useSelector<AppState, string>(\r\n    ({ boards }) => boards.byId[id].title\r\n  );\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const toggleEdit = () => setEditMode(!editMode);\r\n\r\n  const FieldEditProps = {\r\n    fieldName: 'Title',\r\n    value: title,\r\n    useIconToggler: true,\r\n    editMode,\r\n    onEditToggle: toggleEdit,\r\n    onSubmit: (newTitle: string) => onEdit(id, newTitle),\r\n    onDelete: () => onDelete(id),\r\n  };\r\n\r\n  return editMode ? (\r\n    <div className=\"board-link\">\r\n      <FieldEditor {...FieldEditProps} />\r\n    </div>\r\n  ) : (\r\n    <NavLink to={`/boards/${id}`} className=\"board-link\">\r\n      <FieldEditor {...FieldEditProps} />\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default memo(BoardLink);\r\n","import React, { FC, memo } from 'react';\r\nimport { FieldEditor } from 'shared';\r\n\r\nexport interface NewBoardProps {\r\n  onCreate: (title: string) => any;\r\n}\r\n\r\nconst NewBoard: FC<NewBoardProps> = ({ onCreate }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"board-link new-board\">\r\n        <FieldEditor\r\n          fieldName=\"Title\"\r\n          displayOnViewMode=\"New Board\"\r\n          onSubmit={onCreate}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(NewBoard);\r\n","import React, { FC, WheelEvent, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { HORIZONTAL_SCROLLING_SPEED_FACTOR, AppState } from 'utils';\r\nimport BoardLink from './BoardLink';\r\nimport NewBoard from './NewBoard';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createBoard, deleteBoard, changeBoard } from 'boards/actions';\r\n\r\nconst BoardsNavigation: FC = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const boardsIds = useSelector<AppState, string[]>(\r\n    ({ boards }) => boards.allIds\r\n  );\r\n\r\n  const onCreate = useCallback(\r\n    (title: string) => dispatch(createBoard(title)),\r\n    [dispatch]\r\n  );\r\n\r\n  const onDelete = useCallback(\r\n    (boardId: string) => {\r\n      if (history.location.pathname.includes(boardId)) history.push('/boards/');\r\n      dispatch(deleteBoard(boardId));\r\n    },\r\n    [dispatch, history]\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (boardId: string, newTitle: string) => {\r\n      dispatch(changeBoard(boardId, newTitle));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onWheel = ({\r\n    target,\r\n    currentTarget,\r\n    deltaY,\r\n  }: WheelEvent<HTMLDivElement>) => {\r\n    if ((target as HTMLElement)?.closest('.field-editor.edit')) return;\r\n    currentTarget.scrollTo({\r\n      left: currentTarget.scrollLeft +=\r\n        deltaY * HORIZONTAL_SCROLLING_SPEED_FACTOR,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <nav className=\"boards-navigation\" onWheel={onWheel}>\r\n      <ul>\r\n        {boardsIds.map(id => (\r\n          <li key={id}>\r\n            <BoardLink id={id} onDelete={onDelete} onEdit={onEdit} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <NewBoard onCreate={onCreate} />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default BoardsNavigation;\r\n","import React, { FC } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport 'normalize.css';\nimport './App.scss';\nimport store from './store';\nimport { watchState } from './localStorage';\nimport Header from './Header/Header';\nimport HomePage from './HomePage/HomePage';\nimport BoardPage from './BoardPage/BoardPage';\nimport BoardsNavigation from 'boards';\nimport NotFoundPage from './NotFoundPage/NotFoundPage';\n\nwatchState();\n\nconst App: FC = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact={true} component={HomePage} />\n          <Route\n            path=\"/boards\"\n            render={() => (\n              <>\n                <BoardsNavigation />\n                <Route path=\"/boards/:id\" component={BoardPage} />\n              </>\n            )}\n          />\n          <Route\n            path=\"*\"\n            render={() => <NotFoundPage message=\"Such page doesn't exist!\" />}\n          />\n        </Switch>\n      </Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'app/App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}